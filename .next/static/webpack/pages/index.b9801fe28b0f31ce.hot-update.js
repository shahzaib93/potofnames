"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/index",{

/***/ "./plugins/amazing-spin-wheel-game/index.js":
/*!**************************************************!*\
  !*** ./plugins/amazing-spin-wheel-game/index.js ***!
  \**************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("/* module decorator */ module = __webpack_require__.nmd(module);\n\nvar _logoJpg = _interopRequireDefault(__webpack_require__(/*! ../../public/logo.jpg */ \"./public/logo.jpg\"));\nfunction _arrayWithHoles(arr) {\n    if (Array.isArray(arr)) return arr;\n}\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nfunction _iterableToArrayLimit(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n    try {\n        for(var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true){\n            _arr.push(_s.value);\n            if (i && _arr.length === i) break;\n        }\n    } catch (err) {\n        _d = true;\n        _e = err;\n    } finally{\n        try {\n            if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n        } finally{\n            if (_d) throw _e;\n        }\n    }\n    return _arr;\n}\nfunction _nonIterableRest() {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\nfunction _slicedToArray(arr, i) {\n    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\nvar _s1 = $RefreshSig$();\nvar React = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\nvar ref2 = __webpack_require__(/*! react-howler */ \"./node_modules/react-howler/lib/index.js\"), ReactHowler = ref2.default;\nvar WheelComponent = function WheelComponent(_ref) {\n    _s1();\n    // console.log(_ref.segments);\n    var shouldWeSpin = _ref.shouldWeSpin, setShouldWeSpin = _ref.setShouldWeSpin;\n    var ref = _slicedToArray(React.useState(false), 2), sound = ref[0], setSound = ref[1];\n    var ref1 = _slicedToArray(React.useState(\"\"), 2), LogoImg = ref1[0], setLogoImg = ref1[1];\n    {\n    }\n    {\n    }\n    var segments = _ref.segments, spinSeconds = _ref.spinSeconds, segColors = _ref.segColors, winningSegment = _ref.winningSegment, onFinished = _ref.onFinished, _ref$primaryColor = _ref.primaryColor, primaryColor = _ref$primaryColor === void 0 ? 'black' : _ref$primaryColor, _ref$contrastColor = _ref.contrastColor, contrastColor = _ref$contrastColor === void 0 ? 'white' : _ref$contrastColor, _ref$isOnlyOnce = _ref.isOnlyOnce, isOnlyOnce = _ref$isOnlyOnce === void 0 ? true : _ref$isOnlyOnce, _ref$size = _ref.size, size = _ref$size === void 0 ? 290 : _ref$size, _ref$upDuration = _ref.upDuration, upDuration = _ref$upDuration === void 0 ? 100 : _ref$upDuration, _ref$downDuration = _ref.downDuration, downDuration = _ref$downDuration === void 0 ? 1000 : _ref$downDuration, _ref$fontFamily = _ref.fontFamily, fontFamily = _ref$fontFamily === void 0 ? 'proxima-nova' : _ref$fontFamily;\n    var currentSegment = '';\n    var isStarted = false;\n    var _useState = React.useState(false), isFinished = _useState[0], setFinished = _useState[1];\n    var timerHandle = 0;\n    var timerManualDelay = 50;\n    if (spinSeconds > 60) {\n        timerManualDelay = 60;\n    }\n    // spinSeconds\n    var timerDelay = segments.length < timerManualDelay ? timerManualDelay : segments.length;\n    var angleCurrent = 0;\n    var angleDelta = 0;\n    var canvasContext = null;\n    // var maxSpeed = Math.PI / (segments.length);\n    var maxSpeed = 4;\n    console.log(\"Total segments \".concat(segments.length));\n    console.log(\"Max speed \".concat(maxSpeed));\n    console.log(\"Timer delay \".concat(timerManualDelay));\n    var upTime = segments.length * upDuration;\n    var downTime = segments.length * downDuration;\n    var spinStart = 0;\n    var frames = 0;\n    var centerX = 300;\n    var centerY = 300;\n    React.useEffect(function() {\n        wheelInit();\n    }, [\n        segments\n    ]);\n    React.useEffect(function() {\n        if (shouldWeSpin) {\n            // console.log(\"shouldspin\",shouldWeSpin)\n            setSound(true);\n            wheelInit();\n            spin();\n            setShouldWeSpin(false);\n        // setSound(false)\n        }\n    }, [\n        shouldWeSpin\n    ]);\n    // React.useEffect(() => {\n    //     wheelInit();\n    // },[])\n    var wheelInit = function wheelInit() {\n        initCanvas();\n        wheelDraw();\n    };\n    var initCanvas = function initCanvas() {\n        var canvas = document.getElementById('canvas');\n        canvasContext = canvas.getContext('2d');\n    // var background = new Image();\n    // background.src = \"../wheel_frame.png\";\n    // canvasContext.drawImage(background,100,100,4000,2770);  \n    // var spinBtn = document.getElementById('spinBtn');\n    // console.log(\"33333\");\n    // spinBtn.addEventListener('click', spin, false);\n    };\n    var spin = function spin() {\n        console.log(\"spinning\");\n        isStarted = true;\n        if (timerHandle === 0) {\n            spinStart = new Date().getTime();\n            maxSpeed = Math.PI / segments.length;\n            frames = 0;\n            timerHandle = setInterval(onTimerTick, timerDelay);\n        }\n    };\n    var onTimerTick = function onTimerTick() {\n        frames++;\n        draw();\n        var duration = new Date().getTime() - spinStart;\n        console.log(\"duration \".concat(duration));\n        var progress = 0;\n        var finished = false;\n        if (duration < upTime) {\n            progress = duration / upTime;\n            console.log(\"progress \".concat(progress));\n            console.log(\"upTime \".concat(upTime));\n            angleDelta = maxSpeed * Math.sin(progress * Math.PI / 2);\n        } else {\n            if (winningSegment) {\n                if (currentSegment === winningSegment && frames > segments.length) {\n                    progress = duration / upTime;\n                    angleDelta = maxSpeed * Math.sin(progress * Math.PI / 2 + Math.PI / 2);\n                    progress = 1;\n                } else {\n                    progress = duration / downTime;\n                    angleDelta = maxSpeed * Math.sin(progress * Math.PI / 2 + Math.PI / 2);\n                }\n            } else {\n                progress = duration / downTime;\n                angleDelta = maxSpeed * Math.sin(progress * Math.PI / 2 + Math.PI / 2);\n            }\n            if (progress >= 1) finished = true;\n            console.log(\"progress \".concat(progress));\n        }\n        angleCurrent += angleDelta;\n        while(angleCurrent >= Math.PI * 2){\n            angleCurrent -= Math.PI * 2;\n        }\n        if (finished) {\n            setFinished(true);\n            onFinished(currentSegment);\n            clearInterval(timerHandle);\n            timerHandle = 0;\n            angleDelta = 0;\n        }\n    };\n    var wheelDraw = function wheelDraw() {\n        clear();\n        drawWheel();\n        drawNeedle();\n    };\n    var draw = function draw() {\n        clear();\n        drawWheel();\n        drawNeedle();\n    };\n    var drawSegment = function drawSegment(key, lastAngle, angle) {\n        var ctx = canvasContext;\n        var value = segments[key];\n        ctx.save();\n        ctx.beginPath();\n        ctx.moveTo(centerX, centerY);\n        ctx.arc(centerX, centerY, size, lastAngle, angle, false);\n        ctx.lineTo(centerX, centerY);\n        ctx.closePath();\n        ctx.fillStyle = segColors[key];\n        ctx.fill();\n        ctx.stroke();\n        ctx.save();\n        ctx.translate(centerX, centerY);\n        ctx.rotate((lastAngle + angle) / 2);\n        ctx.fillStyle = contrastColor;\n        ctx.font = 'bold 1em ' + fontFamily;\n        ctx.fillText(value.substr(0, 21), size / 2 + 20, 0);\n        ctx.restore();\n    };\n    var drawWheel = function drawWheel() {\n        var ctx = canvasContext;\n        var lastAngle = angleCurrent;\n        var len = segments.length;\n        var PI2 = Math.PI * 2;\n        ctx.lineWidth = 1;\n        ctx.strokeStyle = primaryColor;\n        ctx.textBaseline = 'middle';\n        ctx.textAlign = 'center';\n        ctx.font = '1em ' + fontFamily;\n        for(var i = 1; i <= len; i++){\n            var angle = PI2 * (i / len) + angleCurrent;\n            drawSegment(i - 1, lastAngle, angle);\n            lastAngle = angle;\n        }\n        ctx.beginPath();\n        ctx.arc(centerX, centerY, 50, 0, PI2, false);\n        ctx.closePath();\n        // ctx.fillStyle = primaryColor;\n        ctx.lineWidth = 10;\n        ctx.strokeStyle = contrastColor;\n        ctx.fill();\n        ctx.font = 'bold 1em ' + fontFamily;\n        ctx.fillStyle = contrastColor;\n        ctx.textAlign = 'center';\n        // ctx.fillText(buttonText, centerX, centerY + 3);\n        ctx.stroke();\n    // ctx.beginPath();\n    // ctx.arc(centerX, centerY, size, 0, PI2, false);\n    // ctx.closePath();\n    // ctx.lineWidth = 10;\n    // ctx.strokeStyle = primaryColor;\n    // ctx.stroke();\n    };\n    var drawNeedle = function drawNeedle() {\n        setLogoImg(localStorage.getItem(\"CenterLogo\"));\n        var ctx = canvasContext;\n        // ctx.lineWidth = 1;\n        // ctx.strokeStyle = contrastColor;\n        // ctx.fileStyle = contrastColor;\n        // ctx.beginPath();\n        // ctx.moveTo(centerX + 20, centerY - 50);\n        // ctx.lineTo(centerX - 20, centerY - 50);\n        // ctx.lineTo(centerX, centerY - 70);\n        // ctx.closePath();\n        // ctx.fill();\n        var change = angleCurrent + Math.PI / 2;\n        var i = segments.length - Math.floor(change / (Math.PI * 2) * segments.length) - 1;\n        if (i < 0) i = i + segments.length;\n        ctx.textAlign = 'center';\n        ctx.textBaseline = 'middle';\n        ctx.fillStyle = primaryColor;\n        ctx.font = 'bold 1.5em ' + fontFamily;\n        currentSegment = segments[i];\n        isStarted && ctx.fillText(currentSegment, centerX + 10, centerY + size + 50);\n        var img = new Image();\n        img.src = \"roundlogo.png\";\n        // ctx.globalCompositeOperation='destination-over';\n        ctx.drawImage(img, centerX - 50, centerY - 50, 100, 100);\n    };\n    var clear = function clear() {\n        var ctx = canvasContext;\n        ctx.clearRect(0, 0, 1000, 800);\n    };\n    return React.createElement(\"div\", {\n        id: \"wheel\"\n    }, React.createElement(\"canvas\", {\n        id: \"canvas\",\n        width: \"590\",\n        height: \"590\",\n        style: {\n            marginTop: \"42px\",\n            marginLeft: \"39px\",\n            pointerEvents: isFinished && isOnlyOnce ? 'none' : 'auto'\n        }\n    }));\n};\n_s1(WheelComponent, \"v5r19T+4njWnts1pYQ20CiNNIII=\");\n_c = WheelComponent;\nmodule.exports = React.memo(WheelComponent);\nvar _c;\n$RefreshReg$(_c, \"WheelComponent\");\n\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9wbHVnaW5zL2FtYXppbmctc3Bpbi13aGVlbC1nYW1lL2luZGV4LmpzLmpzIiwibWFwcGluZ3MiOiI7O0FBRWdCLEdBQXVCLENBQXZCLFFBQXVCOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUZ2QyxHQUFHLENBQUNBLEtBQUssR0FBR0MsbUJBQU8sQ0FBQyw0Q0FBTztBQUMzQixHQUFLLENBQTRCQSxJQUF1QixHQUF2QkEsbUJBQU8sQ0FBQyw4REFBYyxHQUF0Q0MsV0FBVyxHQUFLRCxJQUF1QixDQUFoREUsT0FBTztBQUVmLEdBQUcsQ0FBQ0MsY0FBYyxHQUFHLFFBQVEsQ0FBQ0EsY0FBYyxDQUFDQyxJQUFJLEVBQUUsQ0FBQzs7SUFDbEQsRUFBOEI7SUFDOUIsR0FBSyxDQUFFQyxZQUFZLEdBQXFCRCxJQUFJLENBQXJDQyxZQUFZLEVBQUVDLGVBQWUsR0FBSUYsSUFBSSxDQUF2QkUsZUFBZTtJQUNwQyxHQUFLLENBQXFCUCxHQUFxQixrQkFBckJBLEtBQUssQ0FBQ1EsUUFBUSxDQUFDLEtBQUssT0FBdkNDLEtBQUssR0FBY1QsR0FBcUIsS0FBakNVLFFBQVEsR0FBSVYsR0FBcUI7SUFDL0MsR0FBSyxDQUF5QkEsSUFBa0Isa0JBQWxCQSxLQUFLLENBQUNRLFFBQVEsQ0FBQyxDQUFFLFFBQXhDRyxPQUFPLEdBQWdCWCxJQUFrQixLQUFoQ1ksVUFBVSxHQUFJWixJQUFrQjtJQUVsRCxDQUFDO0lBQXlELENBQUM7SUFFM0QsQ0FBQztJQUFvQyxDQUFDO0lBQ3BDLEdBQUcsQ0FBQ2EsUUFBUSxHQUFHUixJQUFJLENBQUNRLFFBQVEsRUFDeEJDLFdBQVcsR0FBR1QsSUFBSSxDQUFDUyxXQUFXLEVBQzlCQyxTQUFTLEdBQUdWLElBQUksQ0FBQ1UsU0FBUyxFQUMxQkMsY0FBYyxHQUFHWCxJQUFJLENBQUNXLGNBQWMsRUFDcENDLFVBQVUsR0FBR1osSUFBSSxDQUFDWSxVQUFVLEVBQzVCQyxpQkFBaUIsR0FBR2IsSUFBSSxDQUFDYyxZQUFZLEVBQ3JDQSxZQUFZLEdBQUdELGlCQUFpQixLQUFLLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBTyxTQUFHQSxpQkFBaUIsRUFDekVFLGtCQUFrQixHQUFHZixJQUFJLENBQUNnQixhQUFhLEVBQ3ZDQSxhQUFhLEdBQUdELGtCQUFrQixLQUFLLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBTyxTQUFHQSxrQkFBa0IsRUFDNUVFLGVBQWUsR0FBR2pCLElBQUksQ0FBQ2tCLFVBQVUsRUFDakNBLFVBQVUsR0FBR0QsZUFBZSxLQUFLLElBQUksQ0FBQyxDQUFDLEdBQUcsSUFBSSxHQUFHQSxlQUFlLEVBQ2hFRSxTQUFTLEdBQUduQixJQUFJLENBQUNvQixJQUFJLEVBQ3JCQSxJQUFJLEdBQUdELFNBQVMsS0FBSyxJQUFJLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBR0EsU0FBUyxFQUM3Q0UsZUFBZSxHQUFHckIsSUFBSSxDQUFDc0IsVUFBVSxFQUNqQ0EsVUFBVSxHQUFHRCxlQUFlLEtBQUssSUFBSSxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUdBLGVBQWUsRUFDL0RFLGlCQUFpQixHQUFHdkIsSUFBSSxDQUFDd0IsWUFBWSxFQUNyQ0EsWUFBWSxHQUFHRCxpQkFBaUIsS0FBSyxJQUFJLENBQUMsQ0FBQyxHQUFHLElBQUksR0FBR0EsaUJBQWlCLEVBQ3RFRSxlQUFlLEdBQUd6QixJQUFJLENBQUMwQixVQUFVLEVBQ2pDQSxVQUFVLEdBQUdELGVBQWUsS0FBSyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQWMsZ0JBQUdBLGVBQWU7SUFDOUUsR0FBRyxDQUFDRSxjQUFjLEdBQUcsQ0FBRTtJQUN2QixHQUFHLENBQUNDLFNBQVMsR0FBRyxLQUFLO0lBRXJCLEdBQUcsQ0FBQ0MsU0FBUyxHQUFHbEMsS0FBSyxDQUFDUSxRQUFRLENBQUMsS0FBSyxHQUNoQzJCLFVBQVUsR0FBR0QsU0FBUyxDQUFDLENBQUMsR0FDeEJFLFdBQVcsR0FBR0YsU0FBUyxDQUFDLENBQUM7SUFFN0IsR0FBRyxDQUFDRyxXQUFXLEdBQUcsQ0FBQztJQUNuQixHQUFHLENBQUNDLGdCQUFnQixHQUFHLEVBQUU7SUFDekIsRUFBRSxFQUFDeEIsV0FBVyxHQUFHLEVBQUUsRUFBQyxDQUFDO1FBQ25Cd0IsZ0JBQWdCLEdBQUcsRUFBRTtJQUN2QixDQUFDO0lBQ0QsRUFBYztJQUNkLEdBQUcsQ0FBQ0MsVUFBVSxHQUFJMUIsUUFBUSxDQUFDMkIsTUFBTSxHQUFHRixnQkFBZ0IsR0FBSUEsZ0JBQWdCLEdBQUd6QixRQUFRLENBQUMyQixNQUFNO0lBQzFGLEdBQUcsQ0FBQ0MsWUFBWSxHQUFHLENBQUM7SUFDcEIsR0FBRyxDQUFDQyxVQUFVLEdBQUcsQ0FBQztJQUNsQixHQUFHLENBQUNDLGFBQWEsR0FBRyxJQUFJO0lBQ3hCLEVBQThDO0lBQzlDLEdBQUcsQ0FBQ0MsUUFBUSxHQUFHLENBQUM7SUFDaEJDLE9BQU8sQ0FBQ0MsR0FBRyxDQUFFLENBQWUsaUJBQWtCLE9BQWhCakMsUUFBUSxDQUFDMkIsTUFBTTtJQUM3Q0ssT0FBTyxDQUFDQyxHQUFHLENBQUUsQ0FBVSxZQUFXLE9BQVRGLFFBQVE7SUFDakNDLE9BQU8sQ0FBQ0MsR0FBRyxDQUFFLENBQVksY0FBbUIsT0FBakJSLGdCQUFnQjtJQUMzQyxHQUFHLENBQUNTLE1BQU0sR0FBR2xDLFFBQVEsQ0FBQzJCLE1BQU0sR0FBR2IsVUFBVTtJQUN6QyxHQUFHLENBQUNxQixRQUFRLEdBQUduQyxRQUFRLENBQUMyQixNQUFNLEdBQUdYLFlBQVk7SUFDN0MsR0FBRyxDQUFDb0IsU0FBUyxHQUFHLENBQUM7SUFDakIsR0FBRyxDQUFDQyxNQUFNLEdBQUcsQ0FBQztJQUNkLEdBQUcsQ0FBQ0MsT0FBTyxHQUFHLEdBQUc7SUFDakIsR0FBRyxDQUFDQyxPQUFPLEdBQUcsR0FBRztJQUVqQnBELEtBQUssQ0FBQ3FELFNBQVMsQ0FBQyxRQUFRLEdBQUksQ0FBQztRQUMzQkMsU0FBUztJQUNYLENBQUMsRUFBRSxDQUFDekM7UUFBQUEsUUFBUTtJQUFBLENBQUM7SUFFYmIsS0FBSyxDQUFDcUQsU0FBUyxDQUFDLFFBQVEsR0FBRixDQUFDO1FBQ3JCLEVBQUUsRUFBQy9DLFlBQVksRUFBRSxDQUFDO1lBQ2hCLEVBQXlDO1lBQ3pDSSxRQUFRLENBQUMsSUFBSTtZQUNiNEMsU0FBUztZQUNUQyxJQUFJO1lBQ0poRCxlQUFlLENBQUMsS0FBSztRQUNyQixFQUFrQjtRQUNwQixDQUFDO0lBQ0gsQ0FBQyxFQUFFLENBQUNEO1FBQUFBLFlBQVk7SUFBQSxDQUFDO0lBRWpCLEVBQTBCO0lBQzFCLEVBQW1CO0lBQ25CLEVBQVE7SUFFUixHQUFHLENBQUNnRCxTQUFTLEdBQUcsUUFBUSxDQUFDQSxTQUFTLEdBQUcsQ0FBQztRQUNwQ0UsVUFBVTtRQUNWQyxTQUFTO0lBQ1gsQ0FBQztJQUVELEdBQUcsQ0FBQ0QsVUFBVSxHQUFHLFFBQVEsQ0FBQ0EsVUFBVSxHQUFHLENBQUM7UUFDdEMsR0FBRyxDQUFDRSxNQUFNLEdBQUdDLFFBQVEsQ0FBQ0MsY0FBYyxDQUFDLENBQVE7UUFDN0NqQixhQUFhLEdBQUdlLE1BQU0sQ0FBQ0csVUFBVSxDQUFDLENBQUk7SUFFdEMsRUFBZ0M7SUFDaEMsRUFBeUM7SUFDekMsRUFBMkQ7SUFFM0QsRUFBb0Q7SUFDcEQsRUFBd0I7SUFDeEIsRUFBa0Q7SUFDcEQsQ0FBQztJQUVELEdBQUcsQ0FBQ04sSUFBSSxHQUFHLFFBQVEsQ0FBQ0EsSUFBSSxHQUFHLENBQUM7UUFDMUJWLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLENBQVU7UUFDdEJiLFNBQVMsR0FBRyxJQUFJO1FBRWhCLEVBQUUsRUFBRUksV0FBVyxLQUFLLENBQUMsRUFBRSxDQUFDO1lBQ3RCWSxTQUFTLEdBQUcsR0FBRyxDQUFDYSxJQUFJLEdBQUdDLE9BQU87WUFDOUJuQixRQUFRLEdBQUdvQixJQUFJLENBQUNDLEVBQUUsR0FBR3BELFFBQVEsQ0FBQzJCLE1BQU07WUFDcENVLE1BQU0sR0FBRyxDQUFDO1lBQ1ZiLFdBQVcsR0FBRzZCLFdBQVcsQ0FBQ0MsV0FBVyxFQUFFNUIsVUFBVTtRQUNuRCxDQUFDO0lBQ0gsQ0FBQztJQUVELEdBQUcsQ0FBQzRCLFdBQVcsR0FBRyxRQUFRLENBQUNBLFdBQVcsR0FBRyxDQUFDO1FBQ3hDakIsTUFBTTtRQUNOa0IsSUFBSTtRQUNKLEdBQUcsQ0FBQ0MsUUFBUSxHQUFHLEdBQUcsQ0FBQ1AsSUFBSSxHQUFHQyxPQUFPLEtBQUtkLFNBQVM7UUFDL0NKLE9BQU8sQ0FBQ0MsR0FBRyxDQUFFLENBQVMsV0FBVyxPQUFUdUIsUUFBUTtRQUNoQyxHQUFHLENBQUNDLFFBQVEsR0FBRyxDQUFDO1FBQ2hCLEdBQUcsQ0FBQ0MsUUFBUSxHQUFHLEtBQUs7UUFFcEIsRUFBRSxFQUFFRixRQUFRLEdBQUd0QixNQUFNLEVBQUUsQ0FBQztZQUV0QnVCLFFBQVEsR0FBR0QsUUFBUSxHQUFHdEIsTUFBTTtZQUM1QkYsT0FBTyxDQUFDQyxHQUFHLENBQUUsQ0FBUyxXQUFXLE9BQVR3QixRQUFRO1lBQ2hDekIsT0FBTyxDQUFDQyxHQUFHLENBQUUsQ0FBTyxTQUFTLE9BQVBDLE1BQU07WUFDNUJMLFVBQVUsR0FBR0UsUUFBUSxHQUFHb0IsSUFBSSxDQUFDUSxHQUFHLENBQUNGLFFBQVEsR0FBR04sSUFBSSxDQUFDQyxFQUFFLEdBQUcsQ0FBQztRQUN6RCxDQUFDLE1BQU0sQ0FBQztZQUNOLEVBQUUsRUFBRWpELGNBQWMsRUFBRSxDQUFDO2dCQUNuQixFQUFFLEVBQUVnQixjQUFjLEtBQUtoQixjQUFjLElBQUlrQyxNQUFNLEdBQUdyQyxRQUFRLENBQUMyQixNQUFNLEVBQUUsQ0FBQztvQkFDbEU4QixRQUFRLEdBQUdELFFBQVEsR0FBR3RCLE1BQU07b0JBQzVCTCxVQUFVLEdBQUdFLFFBQVEsR0FBR29CLElBQUksQ0FBQ1EsR0FBRyxDQUFDRixRQUFRLEdBQUdOLElBQUksQ0FBQ0MsRUFBRSxHQUFHLENBQUMsR0FBR0QsSUFBSSxDQUFDQyxFQUFFLEdBQUcsQ0FBQztvQkFDckVLLFFBQVEsR0FBRyxDQUFDO2dCQUNkLENBQUMsTUFBTSxDQUFDO29CQUNOQSxRQUFRLEdBQUdELFFBQVEsR0FBR3JCLFFBQVE7b0JBQzlCTixVQUFVLEdBQUdFLFFBQVEsR0FBR29CLElBQUksQ0FBQ1EsR0FBRyxDQUFDRixRQUFRLEdBQUdOLElBQUksQ0FBQ0MsRUFBRSxHQUFHLENBQUMsR0FBR0QsSUFBSSxDQUFDQyxFQUFFLEdBQUcsQ0FBQztnQkFDdkUsQ0FBQztZQUNILENBQUMsTUFBTSxDQUFDO2dCQUNOSyxRQUFRLEdBQUdELFFBQVEsR0FBR3JCLFFBQVE7Z0JBQzlCTixVQUFVLEdBQUdFLFFBQVEsR0FBR29CLElBQUksQ0FBQ1EsR0FBRyxDQUFDRixRQUFRLEdBQUdOLElBQUksQ0FBQ0MsRUFBRSxHQUFHLENBQUMsR0FBR0QsSUFBSSxDQUFDQyxFQUFFLEdBQUcsQ0FBQztZQUN2RSxDQUFDO1lBRUQsRUFBRSxFQUFFSyxRQUFRLElBQUksQ0FBQyxFQUFFQyxRQUFRLEdBQUcsSUFBSTtZQUNsQzFCLE9BQU8sQ0FBQ0MsR0FBRyxDQUFFLENBQVMsV0FBVyxPQUFUd0IsUUFBUTtRQUNsQyxDQUFDO1FBRUQ3QixZQUFZLElBQUlDLFVBQVU7Y0FDbkJELFlBQVksSUFBSXVCLElBQUksQ0FBQ0MsRUFBRSxHQUFHLENBQUMsQ0FBRSxDQUFDO1lBQ25DeEIsWUFBWSxJQUFJdUIsSUFBSSxDQUFDQyxFQUFFLEdBQUcsQ0FBQztRQUM3QixDQUFDO1FBRUQsRUFBRSxFQUFFTSxRQUFRLEVBQUUsQ0FBQztZQUNibkMsV0FBVyxDQUFDLElBQUk7WUFDaEJuQixVQUFVLENBQUNlLGNBQWM7WUFDekJ5QyxhQUFhLENBQUNwQyxXQUFXO1lBQ3pCQSxXQUFXLEdBQUcsQ0FBQztZQUNmSyxVQUFVLEdBQUcsQ0FBQztRQUNoQixDQUFDO0lBQ0gsQ0FBQztJQUVELEdBQUcsQ0FBQ2UsU0FBUyxHQUFHLFFBQVEsQ0FBQ0EsU0FBUyxHQUFHLENBQUM7UUFDcENpQixLQUFLO1FBQ0xDLFNBQVM7UUFDVEMsVUFBVTtJQUNaLENBQUM7SUFFRCxHQUFHLENBQUNSLElBQUksR0FBRyxRQUFRLENBQUNBLElBQUksR0FBRyxDQUFDO1FBQzFCTSxLQUFLO1FBQ0xDLFNBQVM7UUFDVEMsVUFBVTtJQUNaLENBQUM7SUFFRCxHQUFHLENBQUNDLFdBQVcsR0FBRyxRQUFRLENBQUNBLFdBQVcsQ0FBQ0MsR0FBRyxFQUFFQyxTQUFTLEVBQUVDLEtBQUssRUFBRSxDQUFDO1FBRTdELEdBQUcsQ0FBQ0MsR0FBRyxHQUFHdEMsYUFBYTtRQUV2QixHQUFHLENBQUN1QyxLQUFLLEdBQUdyRSxRQUFRLENBQUNpRSxHQUFHO1FBQ3hCRyxHQUFHLENBQUNFLElBQUk7UUFDUkYsR0FBRyxDQUFDRyxTQUFTO1FBQ2JILEdBQUcsQ0FBQ0ksTUFBTSxDQUFDbEMsT0FBTyxFQUFFQyxPQUFPO1FBQzNCNkIsR0FBRyxDQUFDSyxHQUFHLENBQUNuQyxPQUFPLEVBQUVDLE9BQU8sRUFBRTNCLElBQUksRUFBRXNELFNBQVMsRUFBRUMsS0FBSyxFQUFFLEtBQUs7UUFDdkRDLEdBQUcsQ0FBQ00sTUFBTSxDQUFDcEMsT0FBTyxFQUFFQyxPQUFPO1FBQzNCNkIsR0FBRyxDQUFDTyxTQUFTO1FBQ2JQLEdBQUcsQ0FBQ1EsU0FBUyxHQUFHMUUsU0FBUyxDQUFDK0QsR0FBRztRQUM3QkcsR0FBRyxDQUFDUyxJQUFJO1FBQ1JULEdBQUcsQ0FBQ1UsTUFBTTtRQUNWVixHQUFHLENBQUNFLElBQUk7UUFDUkYsR0FBRyxDQUFDVyxTQUFTLENBQUN6QyxPQUFPLEVBQUVDLE9BQU87UUFDOUI2QixHQUFHLENBQUNZLE1BQU0sRUFBRWQsU0FBUyxHQUFHQyxLQUFLLElBQUksQ0FBQztRQUNsQ0MsR0FBRyxDQUFDUSxTQUFTLEdBQUdwRSxhQUFhO1FBQzdCNEQsR0FBRyxDQUFDYSxJQUFJLEdBQUcsQ0FBVyxhQUFHL0QsVUFBVTtRQUNuQ2tELEdBQUcsQ0FBQ2MsUUFBUSxDQUFDYixLQUFLLENBQUNjLE1BQU0sQ0FBQyxDQUFDLEVBQUUsRUFBRSxHQUFHdkUsSUFBSSxHQUFHLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQztRQUNsRHdELEdBQUcsQ0FBQ2dCLE9BQU87SUFDYixDQUFDO0lBRUQsR0FBRyxDQUFDdEIsU0FBUyxHQUFHLFFBQVEsQ0FBQ0EsU0FBUyxHQUFHLENBQUM7UUFHcEMsR0FBRyxDQUFDTSxHQUFHLEdBQUd0QyxhQUFhO1FBRXZCLEdBQUcsQ0FBQ29DLFNBQVMsR0FBR3RDLFlBQVk7UUFDNUIsR0FBRyxDQUFDeUQsR0FBRyxHQUFHckYsUUFBUSxDQUFDMkIsTUFBTTtRQUN6QixHQUFHLENBQUMyRCxHQUFHLEdBQUduQyxJQUFJLENBQUNDLEVBQUUsR0FBRyxDQUFDO1FBQ3JCZ0IsR0FBRyxDQUFDbUIsU0FBUyxHQUFHLENBQUM7UUFDakJuQixHQUFHLENBQUNvQixXQUFXLEdBQUdsRixZQUFZO1FBQzlCOEQsR0FBRyxDQUFDcUIsWUFBWSxHQUFHLENBQVE7UUFDM0JyQixHQUFHLENBQUNzQixTQUFTLEdBQUcsQ0FBUTtRQUN4QnRCLEdBQUcsQ0FBQ2EsSUFBSSxHQUFHLENBQU0sUUFBRy9ELFVBQVU7UUFHOUIsR0FBRyxDQUFFLEdBQUcsQ0FBQ3lFLENBQUMsR0FBRyxDQUFDLEVBQUVBLENBQUMsSUFBSU4sR0FBRyxFQUFFTSxDQUFDLEdBQUksQ0FBQztZQUM5QixHQUFHLENBQUN4QixLQUFLLEdBQUdtQixHQUFHLElBQUlLLENBQUMsR0FBR04sR0FBRyxJQUFJekQsWUFBWTtZQUMxQ29DLFdBQVcsQ0FBQzJCLENBQUMsR0FBRyxDQUFDLEVBQUV6QixTQUFTLEVBQUVDLEtBQUs7WUFDbkNELFNBQVMsR0FBR0MsS0FBSztRQUNuQixDQUFDO1FBQ0RDLEdBQUcsQ0FBQ0csU0FBUztRQUNiSCxHQUFHLENBQUNLLEdBQUcsQ0FBQ25DLE9BQU8sRUFBRUMsT0FBTyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUrQyxHQUFHLEVBQUUsS0FBSztRQUMzQ2xCLEdBQUcsQ0FBQ08sU0FBUztRQUNiLEVBQWdDO1FBQ2hDUCxHQUFHLENBQUNtQixTQUFTLEdBQUcsRUFBRTtRQUNsQm5CLEdBQUcsQ0FBQ29CLFdBQVcsR0FBR2hGLGFBQWE7UUFDL0I0RCxHQUFHLENBQUNTLElBQUk7UUFDUlQsR0FBRyxDQUFDYSxJQUFJLEdBQUcsQ0FBVyxhQUFHL0QsVUFBVTtRQUNuQ2tELEdBQUcsQ0FBQ1EsU0FBUyxHQUFHcEUsYUFBYTtRQUM3QjRELEdBQUcsQ0FBQ3NCLFNBQVMsR0FBRyxDQUFRO1FBQ3hCLEVBQWtEO1FBQ2xEdEIsR0FBRyxDQUFDVSxNQUFNO0lBQ1YsRUFBbUI7SUFDbkIsRUFBa0Q7SUFDbEQsRUFBbUI7SUFDbkIsRUFBc0I7SUFDdEIsRUFBa0M7SUFDbEMsRUFBZ0I7SUFFbEIsQ0FBQztJQUVELEdBQUcsQ0FBQ2YsVUFBVSxHQUFHLFFBQVEsQ0FBQ0EsVUFBVSxHQUFHLENBQUM7UUFDdENoRSxVQUFVLENBQUM2RixZQUFZLENBQUNDLE9BQU8sQ0FBQyxDQUFZO1FBQzVDLEdBQUcsQ0FBQ3pCLEdBQUcsR0FBR3RDLGFBQWE7UUFDdkIsRUFBcUI7UUFDckIsRUFBbUM7UUFDbkMsRUFBaUM7UUFDakMsRUFBbUI7UUFDbkIsRUFBMEM7UUFDMUMsRUFBMEM7UUFDMUMsRUFBcUM7UUFDckMsRUFBbUI7UUFDbkIsRUFBYztRQUNkLEdBQUcsQ0FBQ2dFLE1BQU0sR0FBR2xFLFlBQVksR0FBR3VCLElBQUksQ0FBQ0MsRUFBRSxHQUFHLENBQUM7UUFDdkMsR0FBRyxDQUFDdUMsQ0FBQyxHQUFHM0YsUUFBUSxDQUFDMkIsTUFBTSxHQUFHd0IsSUFBSSxDQUFDNEMsS0FBSyxDQUFDRCxNQUFNLElBQUkzQyxJQUFJLENBQUNDLEVBQUUsR0FBRyxDQUFDLElBQUlwRCxRQUFRLENBQUMyQixNQUFNLElBQUksQ0FBQztRQUNsRixFQUFFLEVBQUVnRSxDQUFDLEdBQUcsQ0FBQyxFQUFFQSxDQUFDLEdBQUdBLENBQUMsR0FBRzNGLFFBQVEsQ0FBQzJCLE1BQU07UUFDbEN5QyxHQUFHLENBQUNzQixTQUFTLEdBQUcsQ0FBUTtRQUN4QnRCLEdBQUcsQ0FBQ3FCLFlBQVksR0FBRyxDQUFRO1FBQzNCckIsR0FBRyxDQUFDUSxTQUFTLEdBQUd0RSxZQUFZO1FBQzVCOEQsR0FBRyxDQUFDYSxJQUFJLEdBQUcsQ0FBYSxlQUFHL0QsVUFBVTtRQUNyQ0MsY0FBYyxHQUFHbkIsUUFBUSxDQUFDMkYsQ0FBQztRQUMzQnZFLFNBQVMsSUFBSWdELEdBQUcsQ0FBQ2MsUUFBUSxDQUFDL0QsY0FBYyxFQUFFbUIsT0FBTyxHQUFHLEVBQUUsRUFBRUMsT0FBTyxHQUFHM0IsSUFBSSxHQUFHLEVBQUU7UUFDM0UsR0FBRyxDQUFDb0YsR0FBRyxHQUFHLEdBQUcsQ0FBQ0MsS0FBSztRQUNuQkQsR0FBRyxDQUFDRSxHQUFHLEdBQUcsQ0FBZTtRQUN6QixFQUFtRDtRQUNuRDlCLEdBQUcsQ0FBQytCLFNBQVMsQ0FBQ0gsR0FBRyxFQUFDMUQsT0FBTyxHQUFDLEVBQUUsRUFBQ0MsT0FBTyxHQUFDLEVBQUUsRUFBQyxHQUFHLEVBQUMsR0FBRztJQUNqRCxDQUFDO0lBRUQsR0FBRyxDQUFDc0IsS0FBSyxHQUFHLFFBQVEsQ0FBQ0EsS0FBSyxHQUFHLENBQUM7UUFDNUIsR0FBRyxDQUFDTyxHQUFHLEdBQUd0QyxhQUFhO1FBQ3ZCc0MsR0FBRyxDQUFDZ0MsU0FBUyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsSUFBSSxFQUFFLEdBQUc7SUFDL0IsQ0FBQztJQUVELE1BQU0sQ0FBQ2pILEtBQUssQ0FBQ2tILGFBQWEsQ0FBQyxDQUFLLE1BQUUsQ0FBQztRQUNqQ0MsRUFBRSxFQUFFLENBQU87SUFDYixDQUFDLEVBQUVuSCxLQUFLLENBQUNrSCxhQUFhLENBQUMsQ0FBUSxTQUFFLENBQUM7UUFDaENDLEVBQUUsRUFBRSxDQUFRO1FBQ1pDLEtBQUssRUFBRSxDQUFLO1FBQ1pDLE1BQU0sRUFBRSxDQUFLO1FBQ2JDLEtBQUssRUFBRSxDQUFDO1lBQ05DLFNBQVMsRUFBRSxDQUFNO1lBQ2pCQyxVQUFVLEVBQUUsQ0FBTTtZQUNsQkMsYUFBYSxFQUFFdEYsVUFBVSxJQUFJWixVQUFVLEdBQUcsQ0FBTSxRQUFHLENBQU07UUFDM0QsQ0FBQztJQUNILENBQUM7QUFDSCxDQUFDO0lBalJHbkIsY0FBYztLQUFkQSxjQUFjO0FBbVJsQnNILE1BQU0sQ0FBQ0MsT0FBTyxHQUFHM0gsS0FBSyxDQUFDNEgsSUFBSSxDQUFDeEgsY0FBYyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9wbHVnaW5zL2FtYXppbmctc3Bpbi13aGVlbC1nYW1lL2luZGV4LmpzPzc1NWEiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcclxuY29uc3QgeyBkZWZhdWx0OiBSZWFjdEhvd2xlciB9ID0gcmVxdWlyZSgncmVhY3QtaG93bGVyJyk7XHJcbmltcG9ydCBpbWcgZnJvbSBcIi4uLy4uL3B1YmxpYy9sb2dvLmpwZ1wiXHJcbnZhciBXaGVlbENvbXBvbmVudCA9IGZ1bmN0aW9uIFdoZWVsQ29tcG9uZW50KF9yZWYpIHtcclxuICAvLyBjb25zb2xlLmxvZyhfcmVmLnNlZ21lbnRzKTtcclxuICBjb25zdCB7c2hvdWxkV2VTcGluLCBzZXRTaG91bGRXZVNwaW59ID0gX3JlZjtcclxuICBjb25zdCBbc291bmQsIHNldFNvdW5kXSA9IFJlYWN0LnVzZVN0YXRlKGZhbHNlKTtcclxuICBjb25zdCBbTG9nb0ltZywgc2V0TG9nb0ltZ10gPSBSZWFjdC51c2VTdGF0ZShcIlwiKTtcclxuXHJcbnsvKiA8UmVhY3RIb3dsZXIgc3JjPVwiL3doZWVsLXNwaW4ubXAzXCIgcGxheWluZz17dHJ1ZX0vPiAqL31cclxuXHJcbnsvKiA8aW1nIGlkPVwibXlJbWFnZVwiIHNyYz17aW1nZX0vPiAqL31cclxuICB2YXIgc2VnbWVudHMgPSBfcmVmLnNlZ21lbnRzLFxyXG4gICAgICBzcGluU2Vjb25kcyA9IF9yZWYuc3BpblNlY29uZHMsXHJcbiAgICAgIHNlZ0NvbG9ycyA9IF9yZWYuc2VnQ29sb3JzLFxyXG4gICAgICB3aW5uaW5nU2VnbWVudCA9IF9yZWYud2lubmluZ1NlZ21lbnQsXHJcbiAgICAgIG9uRmluaXNoZWQgPSBfcmVmLm9uRmluaXNoZWQsXHJcbiAgICAgIF9yZWYkcHJpbWFyeUNvbG9yID0gX3JlZi5wcmltYXJ5Q29sb3IsXHJcbiAgICAgIHByaW1hcnlDb2xvciA9IF9yZWYkcHJpbWFyeUNvbG9yID09PSB2b2lkIDAgPyAnYmxhY2snIDogX3JlZiRwcmltYXJ5Q29sb3IsXHJcbiAgICAgIF9yZWYkY29udHJhc3RDb2xvciA9IF9yZWYuY29udHJhc3RDb2xvcixcclxuICAgICAgY29udHJhc3RDb2xvciA9IF9yZWYkY29udHJhc3RDb2xvciA9PT0gdm9pZCAwID8gJ3doaXRlJyA6IF9yZWYkY29udHJhc3RDb2xvcixcclxuICAgICAgX3JlZiRpc09ubHlPbmNlID0gX3JlZi5pc09ubHlPbmNlLFxyXG4gICAgICBpc09ubHlPbmNlID0gX3JlZiRpc09ubHlPbmNlID09PSB2b2lkIDAgPyB0cnVlIDogX3JlZiRpc09ubHlPbmNlLFxyXG4gICAgICBfcmVmJHNpemUgPSBfcmVmLnNpemUsXHJcbiAgICAgIHNpemUgPSBfcmVmJHNpemUgPT09IHZvaWQgMCA/IDI5MCA6IF9yZWYkc2l6ZSxcclxuICAgICAgX3JlZiR1cER1cmF0aW9uID0gX3JlZi51cER1cmF0aW9uLFxyXG4gICAgICB1cER1cmF0aW9uID0gX3JlZiR1cER1cmF0aW9uID09PSB2b2lkIDAgPyAxMDAgOiBfcmVmJHVwRHVyYXRpb24sXHJcbiAgICAgIF9yZWYkZG93bkR1cmF0aW9uID0gX3JlZi5kb3duRHVyYXRpb24sXHJcbiAgICAgIGRvd25EdXJhdGlvbiA9IF9yZWYkZG93bkR1cmF0aW9uID09PSB2b2lkIDAgPyAxMDAwIDogX3JlZiRkb3duRHVyYXRpb24sXHJcbiAgICAgIF9yZWYkZm9udEZhbWlseSA9IF9yZWYuZm9udEZhbWlseSxcclxuICAgICAgZm9udEZhbWlseSA9IF9yZWYkZm9udEZhbWlseSA9PT0gdm9pZCAwID8gJ3Byb3hpbWEtbm92YScgOiBfcmVmJGZvbnRGYW1pbHk7XHJcbiAgdmFyIGN1cnJlbnRTZWdtZW50ID0gJyc7XHJcbiAgdmFyIGlzU3RhcnRlZCA9IGZhbHNlO1xyXG5cclxuICB2YXIgX3VzZVN0YXRlID0gUmVhY3QudXNlU3RhdGUoZmFsc2UpLFxyXG4gICAgICBpc0ZpbmlzaGVkID0gX3VzZVN0YXRlWzBdLFxyXG4gICAgICBzZXRGaW5pc2hlZCA9IF91c2VTdGF0ZVsxXTtcclxuXHJcbiAgdmFyIHRpbWVySGFuZGxlID0gMFxyXG4gIHZhciB0aW1lck1hbnVhbERlbGF5ID0gNTBcclxuICBpZihzcGluU2Vjb25kcyA+IDYwKXtcclxuICAgIHRpbWVyTWFudWFsRGVsYXkgPSA2MFxyXG4gIH1cclxuICAvLyBzcGluU2Vjb25kc1xyXG4gIHZhciB0aW1lckRlbGF5ID0gKHNlZ21lbnRzLmxlbmd0aCA8IHRpbWVyTWFudWFsRGVsYXkgID8gdGltZXJNYW51YWxEZWxheSA6IHNlZ21lbnRzLmxlbmd0aCk7XHJcbiAgdmFyIGFuZ2xlQ3VycmVudCA9IDBcclxuICB2YXIgYW5nbGVEZWx0YSA9IDBcclxuICB2YXIgY2FudmFzQ29udGV4dCA9IG51bGxcclxuICAvLyB2YXIgbWF4U3BlZWQgPSBNYXRoLlBJIC8gKHNlZ21lbnRzLmxlbmd0aCk7XHJcbiAgdmFyIG1heFNwZWVkID0gNFxyXG4gIGNvbnNvbGUubG9nKGBUb3RhbCBzZWdtZW50cyAke3NlZ21lbnRzLmxlbmd0aH1gKVxyXG4gIGNvbnNvbGUubG9nKGBNYXggc3BlZWQgJHttYXhTcGVlZH1gKVxyXG4gIGNvbnNvbGUubG9nKGBUaW1lciBkZWxheSAke3RpbWVyTWFudWFsRGVsYXl9YClcclxuICB2YXIgdXBUaW1lID0gc2VnbWVudHMubGVuZ3RoICogdXBEdXJhdGlvblxyXG4gIHZhciBkb3duVGltZSA9IHNlZ21lbnRzLmxlbmd0aCAqIGRvd25EdXJhdGlvblxyXG4gIHZhciBzcGluU3RhcnQgPSAwXHJcbiAgdmFyIGZyYW1lcyA9IDBcclxuICB2YXIgY2VudGVyWCA9IDMwMFxyXG4gIHZhciBjZW50ZXJZID0gMzAwXHJcblxyXG4gIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XHJcbiAgICB3aGVlbEluaXQoKTtcclxuICB9LCBbc2VnbWVudHNdKTtcclxuXHJcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcclxuICAgIGlmKHNob3VsZFdlU3Bpbikge1xyXG4gICAgICAvLyBjb25zb2xlLmxvZyhcInNob3VsZHNwaW5cIixzaG91bGRXZVNwaW4pXHJcbiAgICAgIHNldFNvdW5kKHRydWUpXHJcbiAgICAgIHdoZWVsSW5pdCgpO1xyXG4gICAgICBzcGluKCk7XHJcbiAgICAgIHNldFNob3VsZFdlU3BpbihmYWxzZSk7XHJcbiAgICAgIC8vIHNldFNvdW5kKGZhbHNlKVxyXG4gICAgfVxyXG4gIH0sIFtzaG91bGRXZVNwaW5dKVxyXG5cclxuICAvLyBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xyXG4gIC8vICAgICB3aGVlbEluaXQoKTtcclxuICAvLyB9LFtdKVxyXG5cclxuICB2YXIgd2hlZWxJbml0ID0gZnVuY3Rpb24gd2hlZWxJbml0KCkge1xyXG4gICAgaW5pdENhbnZhcygpO1xyXG4gICAgd2hlZWxEcmF3KCk7XHJcbiAgfTtcclxuXHJcbiAgdmFyIGluaXRDYW52YXMgPSBmdW5jdGlvbiBpbml0Q2FudmFzKCkge1xyXG4gICAgdmFyIGNhbnZhcyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjYW52YXMnKTtcclxuICAgIGNhbnZhc0NvbnRleHQgPSBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcclxuXHJcbiAgICAvLyB2YXIgYmFja2dyb3VuZCA9IG5ldyBJbWFnZSgpO1xyXG4gICAgLy8gYmFja2dyb3VuZC5zcmMgPSBcIi4uL3doZWVsX2ZyYW1lLnBuZ1wiO1xyXG4gICAgLy8gY2FudmFzQ29udGV4dC5kcmF3SW1hZ2UoYmFja2dyb3VuZCwxMDAsMTAwLDQwMDAsMjc3MCk7ICBcclxuXHJcbiAgICAvLyB2YXIgc3BpbkJ0biA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzcGluQnRuJyk7XHJcbiAgICAvLyBjb25zb2xlLmxvZyhcIjMzMzMzXCIpO1xyXG4gICAgLy8gc3BpbkJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHNwaW4sIGZhbHNlKTtcclxuICB9O1xyXG5cclxuICB2YXIgc3BpbiA9IGZ1bmN0aW9uIHNwaW4oKSB7XHJcbiAgICBjb25zb2xlLmxvZyhcInNwaW5uaW5nXCIpXHJcbiAgICBpc1N0YXJ0ZWQgPSB0cnVlO1xyXG5cclxuICAgIGlmICh0aW1lckhhbmRsZSA9PT0gMCkge1xyXG4gICAgICBzcGluU3RhcnQgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcclxuICAgICAgbWF4U3BlZWQgPSBNYXRoLlBJIC8gc2VnbWVudHMubGVuZ3RoO1xyXG4gICAgICBmcmFtZXMgPSAwO1xyXG4gICAgICB0aW1lckhhbmRsZSA9IHNldEludGVydmFsKG9uVGltZXJUaWNrLCB0aW1lckRlbGF5KTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICB2YXIgb25UaW1lclRpY2sgPSBmdW5jdGlvbiBvblRpbWVyVGljaygpIHtcclxuICAgIGZyYW1lcysrO1xyXG4gICAgZHJhdygpO1xyXG4gICAgdmFyIGR1cmF0aW9uID0gbmV3IERhdGUoKS5nZXRUaW1lKCkgLSBzcGluU3RhcnQ7XHJcbiAgICBjb25zb2xlLmxvZyhgZHVyYXRpb24gJHtkdXJhdGlvbn1gKTtcclxuICAgIHZhciBwcm9ncmVzcyA9IDA7XHJcbiAgICB2YXIgZmluaXNoZWQgPSBmYWxzZTtcclxuXHJcbiAgICBpZiAoZHVyYXRpb24gPCB1cFRpbWUpIHtcclxuXHJcbiAgICAgIHByb2dyZXNzID0gZHVyYXRpb24gLyB1cFRpbWU7XHJcbiAgICAgIGNvbnNvbGUubG9nKGBwcm9ncmVzcyAke3Byb2dyZXNzfWApXHJcbiAgICAgIGNvbnNvbGUubG9nKGB1cFRpbWUgJHt1cFRpbWV9YClcclxuICAgICAgYW5nbGVEZWx0YSA9IG1heFNwZWVkICogTWF0aC5zaW4ocHJvZ3Jlc3MgKiBNYXRoLlBJIC8gMilcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGlmICh3aW5uaW5nU2VnbWVudCkge1xyXG4gICAgICAgIGlmIChjdXJyZW50U2VnbWVudCA9PT0gd2lubmluZ1NlZ21lbnQgJiYgZnJhbWVzID4gc2VnbWVudHMubGVuZ3RoKSB7XHJcbiAgICAgICAgICBwcm9ncmVzcyA9IGR1cmF0aW9uIC8gdXBUaW1lO1xyXG4gICAgICAgICAgYW5nbGVEZWx0YSA9IG1heFNwZWVkICogTWF0aC5zaW4ocHJvZ3Jlc3MgKiBNYXRoLlBJIC8gMiArIE1hdGguUEkgLyAyKTtcclxuICAgICAgICAgIHByb2dyZXNzID0gMTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgcHJvZ3Jlc3MgPSBkdXJhdGlvbiAvIGRvd25UaW1lO1xyXG4gICAgICAgICAgYW5nbGVEZWx0YSA9IG1heFNwZWVkICogTWF0aC5zaW4ocHJvZ3Jlc3MgKiBNYXRoLlBJIC8gMiArIE1hdGguUEkgLyAyKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgcHJvZ3Jlc3MgPSBkdXJhdGlvbiAvIGRvd25UaW1lO1xyXG4gICAgICAgIGFuZ2xlRGVsdGEgPSBtYXhTcGVlZCAqIE1hdGguc2luKHByb2dyZXNzICogTWF0aC5QSSAvIDIgKyBNYXRoLlBJIC8gMik7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmIChwcm9ncmVzcyA+PSAxKSBmaW5pc2hlZCA9IHRydWU7XHJcbiAgICAgIGNvbnNvbGUubG9nKGBwcm9ncmVzcyAke3Byb2dyZXNzfWApO1xyXG4gICAgfVxyXG5cclxuICAgIGFuZ2xlQ3VycmVudCArPSBhbmdsZURlbHRhO1xyXG4gICAgd2hpbGUgKGFuZ2xlQ3VycmVudCA+PSBNYXRoLlBJICogMikge1xyXG4gICAgICBhbmdsZUN1cnJlbnQgLT0gTWF0aC5QSSAqIDI7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGZpbmlzaGVkKSB7XHJcbiAgICAgIHNldEZpbmlzaGVkKHRydWUpO1xyXG4gICAgICBvbkZpbmlzaGVkKGN1cnJlbnRTZWdtZW50KTtcclxuICAgICAgY2xlYXJJbnRlcnZhbCh0aW1lckhhbmRsZSk7XHJcbiAgICAgIHRpbWVySGFuZGxlID0gMDtcclxuICAgICAgYW5nbGVEZWx0YSA9IDA7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgdmFyIHdoZWVsRHJhdyA9IGZ1bmN0aW9uIHdoZWVsRHJhdygpIHtcclxuICAgIGNsZWFyKCk7XHJcbiAgICBkcmF3V2hlZWwoKTtcclxuICAgIGRyYXdOZWVkbGUoKTtcclxuICB9O1xyXG5cclxuICB2YXIgZHJhdyA9IGZ1bmN0aW9uIGRyYXcoKSB7XHJcbiAgICBjbGVhcigpO1xyXG4gICAgZHJhd1doZWVsKCk7XHJcbiAgICBkcmF3TmVlZGxlKCk7XHJcbiAgfTtcclxuXHJcbiAgdmFyIGRyYXdTZWdtZW50ID0gZnVuY3Rpb24gZHJhd1NlZ21lbnQoa2V5LCBsYXN0QW5nbGUsIGFuZ2xlKSB7XHJcbiAgICBcclxuICAgIHZhciBjdHggPSBjYW52YXNDb250ZXh0O1xyXG4gICAgXHJcbiAgICB2YXIgdmFsdWUgPSBzZWdtZW50c1trZXldO1xyXG4gICAgY3R4LnNhdmUoKTtcclxuICAgIGN0eC5iZWdpblBhdGgoKTtcclxuICAgIGN0eC5tb3ZlVG8oY2VudGVyWCwgY2VudGVyWSk7XHJcbiAgICBjdHguYXJjKGNlbnRlclgsIGNlbnRlclksIHNpemUsIGxhc3RBbmdsZSwgYW5nbGUsIGZhbHNlKTtcclxuICAgIGN0eC5saW5lVG8oY2VudGVyWCwgY2VudGVyWSk7XHJcbiAgICBjdHguY2xvc2VQYXRoKCk7XHJcbiAgICBjdHguZmlsbFN0eWxlID0gc2VnQ29sb3JzW2tleV07XHJcbiAgICBjdHguZmlsbCgpO1xyXG4gICAgY3R4LnN0cm9rZSgpO1xyXG4gICAgY3R4LnNhdmUoKTtcclxuICAgIGN0eC50cmFuc2xhdGUoY2VudGVyWCwgY2VudGVyWSk7XHJcbiAgICBjdHgucm90YXRlKChsYXN0QW5nbGUgKyBhbmdsZSkgLyAyKTtcclxuICAgIGN0eC5maWxsU3R5bGUgPSBjb250cmFzdENvbG9yO1xyXG4gICAgY3R4LmZvbnQgPSAnYm9sZCAxZW0gJyArIGZvbnRGYW1pbHk7XHJcbiAgICBjdHguZmlsbFRleHQodmFsdWUuc3Vic3RyKDAsIDIxKSwgc2l6ZSAvIDIgKyAyMCwgMCk7XHJcbiAgICBjdHgucmVzdG9yZSgpO1xyXG4gIH07XHJcblxyXG4gIHZhciBkcmF3V2hlZWwgPSBmdW5jdGlvbiBkcmF3V2hlZWwoKSB7XHJcblxyXG4gICAgXHJcbiAgICB2YXIgY3R4ID0gY2FudmFzQ29udGV4dDtcclxuICAgIFxyXG4gICAgdmFyIGxhc3RBbmdsZSA9IGFuZ2xlQ3VycmVudDtcclxuICAgIHZhciBsZW4gPSBzZWdtZW50cy5sZW5ndGg7XHJcbiAgICB2YXIgUEkyID0gTWF0aC5QSSAqIDI7XHJcbiAgICBjdHgubGluZVdpZHRoID0gMTtcclxuICAgIGN0eC5zdHJva2VTdHlsZSA9IHByaW1hcnlDb2xvcjtcclxuICAgIGN0eC50ZXh0QmFzZWxpbmUgPSAnbWlkZGxlJztcclxuICAgIGN0eC50ZXh0QWxpZ24gPSAnY2VudGVyJztcclxuICAgIGN0eC5mb250ID0gJzFlbSAnICsgZm9udEZhbWlseTtcclxuICAgIFxyXG5cclxuICAgIGZvciAodmFyIGkgPSAxOyBpIDw9IGxlbjsgaSsrKSB7XHJcbiAgICAgIHZhciBhbmdsZSA9IFBJMiAqIChpIC8gbGVuKSArIGFuZ2xlQ3VycmVudDtcclxuICAgICAgZHJhd1NlZ21lbnQoaSAtIDEsIGxhc3RBbmdsZSwgYW5nbGUpO1xyXG4gICAgICBsYXN0QW5nbGUgPSBhbmdsZTtcclxuICAgIH1cclxuICAgIGN0eC5iZWdpblBhdGgoKTtcclxuICAgIGN0eC5hcmMoY2VudGVyWCwgY2VudGVyWSwgNTAsIDAsIFBJMiwgZmFsc2UpO1xyXG4gICAgY3R4LmNsb3NlUGF0aCgpO1xyXG4gICAgLy8gY3R4LmZpbGxTdHlsZSA9IHByaW1hcnlDb2xvcjtcclxuICAgIGN0eC5saW5lV2lkdGggPSAxMDtcclxuICAgIGN0eC5zdHJva2VTdHlsZSA9IGNvbnRyYXN0Q29sb3I7XHJcbiAgICBjdHguZmlsbCgpO1xyXG4gICAgY3R4LmZvbnQgPSAnYm9sZCAxZW0gJyArIGZvbnRGYW1pbHk7XHJcbiAgICBjdHguZmlsbFN0eWxlID0gY29udHJhc3RDb2xvcjtcclxuICAgIGN0eC50ZXh0QWxpZ24gPSAnY2VudGVyJztcclxuICAgIC8vIGN0eC5maWxsVGV4dChidXR0b25UZXh0LCBjZW50ZXJYLCBjZW50ZXJZICsgMyk7XHJcbiAgICBjdHguc3Ryb2tlKCk7XHJcbiAgICAvLyBjdHguYmVnaW5QYXRoKCk7XHJcbiAgICAvLyBjdHguYXJjKGNlbnRlclgsIGNlbnRlclksIHNpemUsIDAsIFBJMiwgZmFsc2UpO1xyXG4gICAgLy8gY3R4LmNsb3NlUGF0aCgpO1xyXG4gICAgLy8gY3R4LmxpbmVXaWR0aCA9IDEwO1xyXG4gICAgLy8gY3R4LnN0cm9rZVN0eWxlID0gcHJpbWFyeUNvbG9yO1xyXG4gICAgLy8gY3R4LnN0cm9rZSgpO1xyXG4gICAgXHJcbiAgfTtcclxuXHJcbiAgdmFyIGRyYXdOZWVkbGUgPSBmdW5jdGlvbiBkcmF3TmVlZGxlKCkge1xyXG4gICAgc2V0TG9nb0ltZyhsb2NhbFN0b3JhZ2UuZ2V0SXRlbShcIkNlbnRlckxvZ29cIikpXHJcbiAgICB2YXIgY3R4ID0gY2FudmFzQ29udGV4dDtcclxuICAgIC8vIGN0eC5saW5lV2lkdGggPSAxO1xyXG4gICAgLy8gY3R4LnN0cm9rZVN0eWxlID0gY29udHJhc3RDb2xvcjtcclxuICAgIC8vIGN0eC5maWxlU3R5bGUgPSBjb250cmFzdENvbG9yO1xyXG4gICAgLy8gY3R4LmJlZ2luUGF0aCgpO1xyXG4gICAgLy8gY3R4Lm1vdmVUbyhjZW50ZXJYICsgMjAsIGNlbnRlclkgLSA1MCk7XHJcbiAgICAvLyBjdHgubGluZVRvKGNlbnRlclggLSAyMCwgY2VudGVyWSAtIDUwKTtcclxuICAgIC8vIGN0eC5saW5lVG8oY2VudGVyWCwgY2VudGVyWSAtIDcwKTtcclxuICAgIC8vIGN0eC5jbG9zZVBhdGgoKTtcclxuICAgIC8vIGN0eC5maWxsKCk7XHJcbiAgICB2YXIgY2hhbmdlID0gYW5nbGVDdXJyZW50ICsgTWF0aC5QSSAvIDI7XHJcbiAgICB2YXIgaSA9IHNlZ21lbnRzLmxlbmd0aCAtIE1hdGguZmxvb3IoY2hhbmdlIC8gKE1hdGguUEkgKiAyKSAqIHNlZ21lbnRzLmxlbmd0aCkgLSAxO1xyXG4gICAgaWYgKGkgPCAwKSBpID0gaSArIHNlZ21lbnRzLmxlbmd0aDtcclxuICAgIGN0eC50ZXh0QWxpZ24gPSAnY2VudGVyJztcclxuICAgIGN0eC50ZXh0QmFzZWxpbmUgPSAnbWlkZGxlJztcclxuICAgIGN0eC5maWxsU3R5bGUgPSBwcmltYXJ5Q29sb3I7XHJcbiAgICBjdHguZm9udCA9ICdib2xkIDEuNWVtICcgKyBmb250RmFtaWx5O1xyXG4gICAgY3VycmVudFNlZ21lbnQgPSBzZWdtZW50c1tpXTtcclxuICAgIGlzU3RhcnRlZCAmJiBjdHguZmlsbFRleHQoY3VycmVudFNlZ21lbnQsIGNlbnRlclggKyAxMCwgY2VudGVyWSArIHNpemUgKyA1MCk7XHJcbiAgICB2YXIgaW1nID0gbmV3IEltYWdlKClcclxuICAgIGltZy5zcmMgPSBcInJvdW5kbG9nby5wbmdcIlxyXG4gICAgLy8gY3R4Lmdsb2JhbENvbXBvc2l0ZU9wZXJhdGlvbj0nZGVzdGluYXRpb24tb3Zlcic7XHJcbiAgICBjdHguZHJhd0ltYWdlKGltZyxjZW50ZXJYLTUwLGNlbnRlclktNTAsMTAwLDEwMClcclxuICB9O1xyXG5cclxuICB2YXIgY2xlYXIgPSBmdW5jdGlvbiBjbGVhcigpIHtcclxuICAgIHZhciBjdHggPSBjYW52YXNDb250ZXh0O1xyXG4gICAgY3R4LmNsZWFyUmVjdCgwLCAwLCAxMDAwLCA4MDApO1xyXG4gIH07XHJcblxyXG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcclxuICAgIGlkOiBcIndoZWVsXCIsXHJcbiAgfSwgUmVhY3QuY3JlYXRlRWxlbWVudChcImNhbnZhc1wiLCB7XHJcbiAgICBpZDogXCJjYW52YXNcIixcclxuICAgIHdpZHRoOiBcIjU5MFwiLFxyXG4gICAgaGVpZ2h0OiBcIjU5MFwiLFxyXG4gICAgc3R5bGU6IHtcclxuICAgICAgbWFyZ2luVG9wOiBcIjQycHhcIixcclxuICAgICAgbWFyZ2luTGVmdDogXCIzOXB4XCIsXHJcbiAgICAgIHBvaW50ZXJFdmVudHM6IGlzRmluaXNoZWQgJiYgaXNPbmx5T25jZSA/ICdub25lJyA6ICdhdXRvJ1xyXG4gICAgfVxyXG4gIH0pKTtcclxufTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gUmVhY3QubWVtbyhXaGVlbENvbXBvbmVudCk7Il0sIm5hbWVzIjpbIlJlYWN0IiwicmVxdWlyZSIsIlJlYWN0SG93bGVyIiwiZGVmYXVsdCIsIldoZWVsQ29tcG9uZW50IiwiX3JlZiIsInNob3VsZFdlU3BpbiIsInNldFNob3VsZFdlU3BpbiIsInVzZVN0YXRlIiwic291bmQiLCJzZXRTb3VuZCIsIkxvZ29JbWciLCJzZXRMb2dvSW1nIiwic2VnbWVudHMiLCJzcGluU2Vjb25kcyIsInNlZ0NvbG9ycyIsIndpbm5pbmdTZWdtZW50Iiwib25GaW5pc2hlZCIsIl9yZWYkcHJpbWFyeUNvbG9yIiwicHJpbWFyeUNvbG9yIiwiX3JlZiRjb250cmFzdENvbG9yIiwiY29udHJhc3RDb2xvciIsIl9yZWYkaXNPbmx5T25jZSIsImlzT25seU9uY2UiLCJfcmVmJHNpemUiLCJzaXplIiwiX3JlZiR1cER1cmF0aW9uIiwidXBEdXJhdGlvbiIsIl9yZWYkZG93bkR1cmF0aW9uIiwiZG93bkR1cmF0aW9uIiwiX3JlZiRmb250RmFtaWx5IiwiZm9udEZhbWlseSIsImN1cnJlbnRTZWdtZW50IiwiaXNTdGFydGVkIiwiX3VzZVN0YXRlIiwiaXNGaW5pc2hlZCIsInNldEZpbmlzaGVkIiwidGltZXJIYW5kbGUiLCJ0aW1lck1hbnVhbERlbGF5IiwidGltZXJEZWxheSIsImxlbmd0aCIsImFuZ2xlQ3VycmVudCIsImFuZ2xlRGVsdGEiLCJjYW52YXNDb250ZXh0IiwibWF4U3BlZWQiLCJjb25zb2xlIiwibG9nIiwidXBUaW1lIiwiZG93blRpbWUiLCJzcGluU3RhcnQiLCJmcmFtZXMiLCJjZW50ZXJYIiwiY2VudGVyWSIsInVzZUVmZmVjdCIsIndoZWVsSW5pdCIsInNwaW4iLCJpbml0Q2FudmFzIiwid2hlZWxEcmF3IiwiY2FudmFzIiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsImdldENvbnRleHQiLCJEYXRlIiwiZ2V0VGltZSIsIk1hdGgiLCJQSSIsInNldEludGVydmFsIiwib25UaW1lclRpY2siLCJkcmF3IiwiZHVyYXRpb24iLCJwcm9ncmVzcyIsImZpbmlzaGVkIiwic2luIiwiY2xlYXJJbnRlcnZhbCIsImNsZWFyIiwiZHJhd1doZWVsIiwiZHJhd05lZWRsZSIsImRyYXdTZWdtZW50Iiwia2V5IiwibGFzdEFuZ2xlIiwiYW5nbGUiLCJjdHgiLCJ2YWx1ZSIsInNhdmUiLCJiZWdpblBhdGgiLCJtb3ZlVG8iLCJhcmMiLCJsaW5lVG8iLCJjbG9zZVBhdGgiLCJmaWxsU3R5bGUiLCJmaWxsIiwic3Ryb2tlIiwidHJhbnNsYXRlIiwicm90YXRlIiwiZm9udCIsImZpbGxUZXh0Iiwic3Vic3RyIiwicmVzdG9yZSIsImxlbiIsIlBJMiIsImxpbmVXaWR0aCIsInN0cm9rZVN0eWxlIiwidGV4dEJhc2VsaW5lIiwidGV4dEFsaWduIiwiaSIsImxvY2FsU3RvcmFnZSIsImdldEl0ZW0iLCJjaGFuZ2UiLCJmbG9vciIsImltZyIsIkltYWdlIiwic3JjIiwiZHJhd0ltYWdlIiwiY2xlYXJSZWN0IiwiY3JlYXRlRWxlbWVudCIsImlkIiwid2lkdGgiLCJoZWlnaHQiLCJzdHlsZSIsIm1hcmdpblRvcCIsIm1hcmdpbkxlZnQiLCJwb2ludGVyRXZlbnRzIiwibW9kdWxlIiwiZXhwb3J0cyIsIm1lbW8iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./plugins/amazing-spin-wheel-game/index.js\n");

/***/ })

});