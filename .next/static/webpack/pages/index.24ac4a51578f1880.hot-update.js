"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/index",{

/***/ "./plugins/amazing-spin-wheel-game/index.js":
/*!**************************************************!*\
  !*** ./plugins/amazing-spin-wheel-game/index.js ***!
  \**************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("/* module decorator */ module = __webpack_require__.nmd(module);\n\nfunction _arrayWithHoles(arr) {\n    if (Array.isArray(arr)) return arr;\n}\nfunction _iterableToArrayLimit(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n    try {\n        for(var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true){\n            _arr.push(_s.value);\n            if (i && _arr.length === i) break;\n        }\n    } catch (err) {\n        _d = true;\n        _e = err;\n    } finally{\n        try {\n            if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n        } finally{\n            if (_d) throw _e;\n        }\n    }\n    return _arr;\n}\nfunction _nonIterableRest() {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\nfunction _slicedToArray(arr, i) {\n    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\nvar _s1 = $RefreshSig$();\nvar React = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\nvar ref7 = __webpack_require__(/*! react-howler */ \"./node_modules/react-howler/lib/index.js\"), ReactHowler = ref7.default;\nvar WheelComponent = function WheelComponent(_ref) {\n    _s1();\n    var shouldWeSpin = _ref.shouldWeSpin, setShouldWeSpin = _ref.setShouldWeSpin;\n    var ref = _slicedToArray(React.useState(false), 2), sound = ref[0], setSound = ref[1];\n    var ref1 = _slicedToArray(React.useState(\"\"), 2), LogoImg = ref1[0], setLogoImg = ref1[1];\n    var ref2 = _slicedToArray(React.useState(\"\"), 2), ArrowImg = ref2[0], setArrowImg = ref2[1];\n    var ref3 = _slicedToArray(React.useState(true), 2), NormalStart = ref3[0], setNormalStart = ref3[1];\n    var ref4 = _slicedToArray(React.useState(\"\"), 2), css = ref4[0], setCss = ref4[1];\n    var segments = _ref.segments, startNormalSpin = _ref.startNormalSpin, entriesToShow = _ref.entriesToShow, spinSeconds = _ref.spinSeconds, segColors = _ref.segColors, winningSegment = _ref.winningSegment, onFinished = _ref.onFinished, _ref$primaryColor = _ref.primaryColor, primaryColor = _ref$primaryColor === void 0 ? 'black' : _ref$primaryColor, _ref$contrastColor = _ref.contrastColor, contrastColor = _ref$contrastColor === void 0 ? 'white' : _ref$contrastColor, _ref$isOnlyOnce = _ref.isOnlyOnce, isOnlyOnce = _ref$isOnlyOnce === void 0 ? true : _ref$isOnlyOnce, _ref$size = _ref.size, size = _ref$size === void 0 ? 290 : _ref$size, _ref$upDuration = _ref.upDuration, upDuration = _ref$upDuration === void 0 ? 100 : _ref$upDuration, _ref$downDuration = _ref.downDuration, downDuration = _ref$downDuration === void 0 ? 1000 : _ref$downDuration, _ref$fontFamily = _ref.fontFamily, fontFamily = _ref$fontFamily === void 0 ? 'proxima-nova' : _ref$fontFamily;\n    var currentSegment = '';\n    var isStarted = false;\n    var newsegments = segments;\n    var remainingsegments = segments;\n    if (entriesToShow > 10) {\n        newsegments = segments.slice(0, entriesToShow);\n        remainingsegments = segments.slice(entriesToShow + 1, segments.length);\n    } else {\n        newsegments = segments;\n    }\n    var _useState = React.useState(false), isFinished = _useState[0], setFinished = _useState[1];\n    var timerHandle = 0;\n    var timerHandleNormal = 0;\n    var timerManualDelay = 50;\n    if (spinSeconds > 60) {\n        timerManualDelay = 60;\n    }\n    // spinSeconds\n    var timerDelay = newsegments.length < timerManualDelay ? timerManualDelay : newsegments.length;\n    var timerDelayNormal = newsegments.length;\n    var angleCurrent = 0;\n    var angleDelta = 0;\n    var angleCurrentNormal = 0;\n    var angleDeltaNormal = 0;\n    var maxSpeedNormal = 0.05;\n    var canvasContext = null;\n    // var maxSpeed = Math.PI / (newsegments.length);\n    var maxSpeed = 4;\n    console.log(\"Total newsegments \".concat(newsegments.length));\n    console.log(\"Max speed \".concat(maxSpeed));\n    console.log(\"Timer delay \".concat(timerManualDelay));\n    var upTime = newsegments.length * upDuration;\n    var downTime = newsegments.length * downDuration;\n    var spinStart = 0;\n    var spinStartNormal = 0;\n    var frames = 0;\n    var framesNormal = 0;\n    var centerX = 300;\n    var centerY = 300;\n    var ref5 = _slicedToArray(React.useState(\"\"), 2), oldval = ref5[0], setOldval = ref5[1];\n    var ref6 = _slicedToArray(React.useState(true), 2), start = ref6[0], setstart = ref6[1];\n    // if(shouldWeSpin){\n    //   setNormalStart(false)\n    // // }\n    React.useEffect(function() {\n        console.log(\"Normal\", startNormalSpin);\n    }, []);\n    React.useEffect(function() {\n        wheelInit();\n        if (startNormalSpin) {\n            // console.log(\"WheelEntries\",entriesToShow)\n            spinNormal();\n        }\n    }, [\n        newsegments\n    ]);\n    React.useEffect(function() {\n        if (shouldWeSpin) {\n            setNormalStart(false);\n            // setstart(false)\n            //  const CANVAS =  document.getElementById(\"canvas\")\n            //  CANVAS.classList.remove(\"CANVAS\")\n            console.log(\"IDDDDD\");\n            // console.log(\"shouldspin\",shouldWeSpin)\n            setSound(true);\n            wheelInit();\n            spin();\n            setShouldWeSpin(false);\n            setNormalStart(false);\n        // setSound(false)\n        }\n    }, [\n        shouldWeSpin\n    ]);\n    // React.useEffect(() => {\n    //     wheelInit();\n    // },[])\n    var wheelInit = function wheelInit() {\n        initCanvas();\n        wheelDraw();\n    // spinNormal()\n    };\n    var initCanvas = function initCanvas() {\n        var canvas = document.getElementById('canvas');\n        canvasContext = canvas.getContext('2d');\n    // var background = new Image();\n    // background.src = \"../wheel_frame.png\";\n    // canvasContext.drawImage(background,100,100,4000,2770);  \n    // var spinBtn = document.getElementById('spinBtn');\n    // console.log(\"33333\");\n    // spinBtn.addEventListener('click', spin, false);\n    };\n    var spinNormal = function spin() {\n        // console.log(\"spinning\")\n        // isStarted = true;\n        if (timerHandleNormal === 0) {\n            spinStartNormal = new Date().getTime();\n            // console.log(\"WHEELSPEED\",Math.PI / newsegments.length)\n            // maxSpeed = 0.1;\n            framesNormal = 0;\n        }\n        timerHandleNormal = setInterval(onTimerTickNormal, maxSpeedNormal);\n    // console.log(\"WHEELTimer\",timerHandleNormal)\n    // console.log(\"WHEELontimertick\",timerHandleNormal)\n    };\n    var count = 1;\n    var mainCount = 0;\n    var onTimerTickNormal = function onTimerTickNormal() {\n        // performance.now()\n        // var duration = new Date().getTime() - spinStartNormal;\n        // console.log(`WHEELduration ${duration}`);\n        framesNormal++;\n        // console.log(\"WHEELtimer\",timerDelay)\n        //   console.log(\"WHEELSpeed\",maxSpeedNormal)\n        //   console.log(\"WHEELDelta\",angleDeltaNormal)\n        //   console.log(\"WHEELCurrent\",angleCurrentNormal)\n        var ctx = canvasContext;\n        var lastAngle = angleCurrentNormal;\n        var len = newsegments.length;\n        // console.log(\"WHEELSEGSSS\",newsegments)\n        var PI2 = Math.PI * 2;\n        ctx.lineWidth = 1;\n        ctx.strokeStyle = primaryColor;\n        ctx.textBaseline = 'middle';\n        ctx.textAlign = 'center';\n        ctx.font = '1em ' + fontFamily;\n        var fixedNoofSeg = 8;\n        var fixedAngle = 4.8;\n        // console.log(\"WHEELsegs\",newsegments)\n        var num = 0;\n        for(var i = 1; i <= len; i++){\n            // console.log(\"WHEELlen\")\n            var angle = PI2 * (i / len) + angleCurrentNormal;\n            // console.log(\"WHEELangleangle\",angle)\n            // console.log(\"WHEELin\",i)\n            drawSegmentNormal(i - 1, lastAngle, angle);\n            lastAngle = angle;\n        }\n        // console.log(\"WHEELnum\",num)\n        angleCurrentNormal += maxSpeedNormal;\n        // ctx.beginPath();\n        // ctx.arc(centerX, centerY, 50, 0, PI2, false);\n        // ctx.closePath();\n        // // ctx.fillStyle = primaryColor;\n        // ctx.lineWidth = 10;\n        // ctx.strokeStyle = contrastColor;\n        // ctx.fill();\n        // ctx.font = 'bold 1em ' + fontFamily;\n        // ctx.fillStyle = contrastColor;\n        // ctx.textAlign = 'center';\n        // // ctx.fillText(buttonText, centerX, centerY + 3);\n        // ctx.stroke();\n        // ctx.beginPath();\n        // ctx.arc(centerX, centerY, size, 0, PI2, false);\n        // ctx.closePath();\n        // ctx.lineWidth = 10;\n        // ctx.strokeStyle = primaryColor;\n        // ctx.stroke();\n        // var duration = new Date().getTime() - spinStart;\n        // console.log(`duration ${duration}`);\n        // var progress = 0;\n        // var finished = false;\n        // console.log(\"WHEELmaxspeed\",maxSpeedNormal)\n        // angleDeltaNormal = maxSpeedNormal\n        // if (duration < upTime) {\n        // console.log(\"WHEELLLLLLL\",duration / upTime)\n        // progress = duration / upTime;\n        // // console.log(`progress ${progress}`)\n        // // console.log(`upTime ${upTime}`)\n        // angleDelta = maxSpeed * Math.sin(progress * Math.PI / 2)\n        // } else {\n        // if (winningSegment) {\n        //   if (currentSegment === winningSegment && frames > newsegments.length) {\n        //     progress = duration / upTime;\n        //     angleDelta = maxSpeed * Math.sin(progress * Math.PI / 2 + Math.PI / 2);\n        //     progress = 1;\n        //   } else {\n        //     progress = duration / downTime;\n        //     angleDelta = maxSpeed * Math.sin(progress * Math.PI / 2 + Math.PI / 2);\n        //   }\n        // } else {\n        // progress = duration / downTime;\n        // angleDelta = maxSpeed * Math.sin(progress * Math.PI / 2 + Math.PI / 2);\n        // if (progress >= 1) finished = true;\n        // console.log(`progress ${progress}`);\n        // }\n        // angleCurrentNormal += angleDeltaNormal;\n        // console.log(\"angle+\",angleCurrent)\n        while(angleCurrentNormal >= Math.PI * 2){\n            angleCurrentNormal -= Math.PI * 2;\n        // console.log(\"angle-\",angleCurrentNormal)\n        }\n    // if (finished) {\n    //   setFinished(true);\n    //   onFinished(currentSegment);\n    //   clearInterval(timerHandle);\n    //   timerHandle = 0;\n    //   angleDelta = 0;\n    // }\n    };\n    var fix = 8;\n    var drawSegmentNormal = function drawSegmentNormal(key, lastAngle, angle) {\n        var drawImageRot = // console.log(\"WHEELvalue\",key)\n        function drawImageRot(img, x, y, width, height, deg) {\n            ctx.save();\n            var rad = deg;\n            ctx.translate(x + width / 2, y + height / 2);\n            ctx.rotate(rad);\n            ctx.drawImage(img, width / 2 * -1, height / 2 * -1, width, height);\n            ctx.restore();\n        };\n        // setOldval[newsegments[0]]\n        //   function drawImageRot(img,x,y,width,height,deg){\n        //     ctx.save()\n        //     var rad = deg\n        //     ctx.translate(x + width / 2, y + height / 2);\n        //     ctx.rotate(rad);\n        //     ctx.drawImage(img,width / 2 * (-1),height / 2 * (-1),width,height)\n        //     ctx.restore();\n        // }\n        // if (angle==4.487989505128276){\n        //   console.log(\"WHEELan\")\n        // }\n        var ctx = canvasContext;\n        // console.log(\"WHEELRemainsegs\",remainingsegments)\n        var value = newsegments[key];\n        // if(3 == Math.ceil(angle) || 3==Math.floor(angle) ){\n        // console.log(\"WHEELanglecount\",value,key)\n        //     console.log(\"WHEELanglecountseg\",count)\n        //     // newsegments[key] =lst[key] \n        //     count+=1\n        // }\n        // if(value==\"Asif\"){\n        //   console.log(\"WHEELpoint\",angleCurrentNormal+8)\n        // }\n        // console.log(\"enter\",entriesToShow>10)\n        if (Math.trunc(angleCurrentNormal) + 6.02 == 6.02 && entriesToShow > 10) {\n            // if(value==newsegments[0]){\n            // console.log(\"WHEELname\",key)\n            // newsegments[key] = `Asif${angleCurrentNormal.toFixed(2)}`\n            // newsegments.remove()\n            // newsegments.push(remainingsegments[0])\n            // if(count%33  ==1 ){\n            // newsegments[key]=newsegments[0]\n            // newsegments.shift()\n            // newsegments.push()\n            newsegments[0] = remainingsegments[Math.floor(Math.random() * remainingsegments.length)];\n            newsegments[1] = remainingsegments[Math.floor(Math.random() * remainingsegments.length)];\n            // newsegments[2] = remainingsegments[Math.floor(Math.random() * remainingsegments.length)]\n            // remainingsegments[count] = newsegments[key]\n            // if(value==oldval  ){\n            //   newsegments[mainCount] = oldval\n            // }\n            mainCount += 1;\n            // }\n            if (mainCount > 7) {\n                count = 1;\n                mainCount = 1;\n            } else {\n                count += 1;\n            }\n        // }\n        // console.log(\"WHEELcounter\",count%33,\"maincount\",mainCount)\n        // if(count/33>8){\n        //   count=1\n        // }\n        // if(count-33==count){\n        // mainCount+=1\n        // console.log(\"WHEELLL\",count)\n        // }\n        // if(count>newsegments.length-1){\n        //   count=0\n        // }\n        // }\n        // console.log(\"WHEELcount\",count)\n        // fix+=8\n        }\n        var img1 = new Image();\n        if (LogoImg != \"\" && LogoImg != null) {\n            img1.src = LogoImg;\n        } else {\n            img1.src = \"roundlogo.png\";\n        }\n        img1.onload = function() {\n            drawImageRot(img1, centerX - 50, centerY - 50, 100, 100, angle);\n        };\n        ctx.save();\n        ctx.beginPath();\n        ctx.moveTo(centerX, centerY);\n        ctx.arc(centerX, centerY, size, lastAngle, angle, false);\n        ctx.lineTo(centerX, centerY);\n        ctx.closePath();\n        ctx.fillStyle = segColors[key];\n        ctx.fill();\n        ctx.stroke();\n        ctx.save();\n        ctx.translate(centerX, centerY);\n        // console.log(\"WHEELanglean\",(lastAngle + angle) / 2)\n        ctx.rotate((lastAngle + angle) / 2);\n        ctx.fillStyle = contrastColor;\n        ctx.font = 'bold 1em ' + fontFamily;\n        ctx.fillText(value.substr(0, 21), size / 2 + 20, 0);\n        ctx.restore();\n    };\n    var spin = function spin() {\n        console.log(\"spinning\");\n        isStarted = true;\n        if (timerHandle === 0) {\n            spinStart = new Date().getTime();\n            maxSpeed = Math.PI / newsegments.length;\n            frames = 0;\n            timerHandle = setInterval(onTimerTick, timerDelay);\n        }\n    };\n    var onTimerTick = function onTimerTick() {\n        frames++;\n        draw();\n        var duration = new Date().getTime() - spinStart;\n        console.log(\"duration \".concat(duration));\n        var progress = 0;\n        var finished = false;\n        if (duration < upTime) {\n            progress = duration / upTime;\n            console.log(\"progress \".concat(progress));\n            console.log(\"upTime \".concat(upTime));\n            angleDelta = maxSpeed * Math.sin(progress * Math.PI / 2);\n        } else {\n            if (winningSegment) {\n                if (currentSegment === winningSegment && frames > newsegments.length) {\n                    progress = duration / upTime;\n                    angleDelta = maxSpeed * Math.sin(progress * Math.PI / 2 + Math.PI / 2);\n                    progress = 1;\n                } else {\n                    progress = duration / downTime;\n                    angleDelta = maxSpeed * Math.sin(progress * Math.PI / 2 + Math.PI / 2);\n                }\n            } else {\n                progress = duration / downTime;\n                angleDelta = maxSpeed * Math.sin(progress * Math.PI / 2 + Math.PI / 2);\n            }\n            if (progress >= 1) finished = true;\n            console.log(\"progress \".concat(progress));\n        }\n        angleCurrent += angleDelta;\n        while(angleCurrent >= Math.PI * 2){\n            angleCurrent -= Math.PI * 2;\n        }\n        if (finished) {\n            setFinished(true);\n            onFinished(currentSegment);\n            clearInterval(timerHandle);\n            timerHandle = 0;\n            angleDelta = 0;\n        }\n    };\n    var wheelDraw = function wheelDraw() {\n        clear();\n        drawWheel();\n        drawNeedle();\n    };\n    var draw = function draw() {\n        clear();\n        drawWheel();\n        drawNeedle();\n    };\n    var drawSegment = function drawSegment(key, lastAngle, angle) {\n        var drawImageRot = function drawImageRot(img, x, y, width, height, deg) {\n            ctx.save();\n            var rad = deg;\n            ctx.translate(x + width / 2, y + height / 2);\n            ctx.rotate(rad);\n            ctx.drawImage(img, width / 2 * -1, height / 2 * -1, width, height);\n            ctx.restore();\n        };\n        var img2 = new Image();\n        if (LogoImg != \"\" && LogoImg != null) {\n            img2.src = LogoImg;\n        } else {\n            img2.src = \"roundlogo.png\";\n        }\n        img2.onload = function() {\n            drawImageRot(img2, centerX - 50, centerY - 50, 100, 100, angle);\n        };\n        if (angle == 4.487989505128276) {\n            console.log(\"WHEELan\");\n        }\n        var ctx = canvasContext;\n        console.log();\n        var value = newsegments[key];\n        if ((Math.trunc(angleCurrent) + 6.02 == 6.02 || Math.trunc(angleCurrent) + 6.03 == 6.03) && entriesToShow > 10) {\n            newsegments[0] = remainingsegments[Math.floor(Math.random() * remainingsegments.length)];\n            newsegments[1] = remainingsegments[Math.floor(Math.random() * remainingsegments.length)];\n        // console.log(\"WHEELvalue\",value)\n        }\n        ctx.save();\n        ctx.beginPath();\n        ctx.moveTo(centerX, centerY);\n        ctx.arc(centerX, centerY, size, lastAngle, angle, false);\n        ctx.lineTo(centerX, centerY);\n        ctx.closePath();\n        ctx.fillStyle = segColors[key];\n        ctx.fill();\n        ctx.stroke();\n        ctx.save();\n        ctx.translate(centerX, centerY);\n        ctx.rotate((lastAngle + angle) / 2);\n        ctx.fillStyle = contrastColor;\n        ctx.font = 'bold 1em ' + fontFamily;\n        ctx.fillText(value.substr(0, 21), size / 2 + 20, 0);\n        ctx.restore();\n    };\n    var drawWheel = function drawWheel() {\n        var ctx = canvasContext;\n        // var Wheelimg = new Image()\n        // Wheelimg.src = \"wheel_frame.png\"\n        // Wheelimg.onload = function(){\n        // ctx.drawImage(Wheelimg,-50,-100,700,900)\n        // }\n        var lastAngle = angleCurrent;\n        var len = newsegments.length;\n        var PI2 = Math.PI * 2;\n        ctx.lineWidth = 1;\n        ctx.strokeStyle = primaryColor;\n        ctx.textBaseline = 'middle';\n        ctx.textAlign = 'center';\n        ctx.font = '1em ' + fontFamily;\n        var fixedNoofSeg = 8;\n        var fixedAngle = 4.8;\n        console.log(\"WHEELsegs\", newsegments);\n        for(var i = 1; i <= len; i++){\n            var angle = PI2 * (i / len) + angleCurrent;\n            // console.log(\"WHEELangle\",angleCurrent)\n            drawSegment(i - 1, lastAngle, angle);\n            lastAngle = angle;\n        }\n        ctx.beginPath();\n        ctx.arc(centerX, centerY, 50, 0, PI2, false);\n        ctx.closePath();\n        // ctx.fillStyle = primaryColor;\n        ctx.lineWidth = 10;\n        ctx.strokeStyle = contrastColor;\n        ctx.fill();\n        ctx.font = 'bold 1em ' + fontFamily;\n        ctx.fillStyle = contrastColor;\n        ctx.textAlign = 'center';\n        // ctx.fillText(buttonText, centerX, centerY + 3);\n        ctx.stroke();\n    // ctx.beginPath();\n    // ctx.arc(centerX, centerY, size, 0, PI2, false);\n    // ctx.closePath();\n    // ctx.lineWidth = 10;\n    // ctx.strokeStyle = primaryColor;\n    // ctx.stroke();\n    };\n    var drawNeedle = function drawNeedle() {\n        var arrow = new Image();\n        var change;\n        var ArrowPos = \"\";\n        console.log(\"ARROW\", ArrowPos);\n        if (localStorage.getItem(\"ArrowPosition\") !== null) {\n            ArrowPos = localStorage.getItem(\"ArrowPosition\");\n        } else {\n            ArrowPos = \"At-3\";\n            change = angleCurrent;\n        }\n        var ctx = canvasContext;\n        arrow.onload = function() {\n            var drawRotate12 = function drawRotate12() {\n                ctx.drawImage(arrow, 225, -55, 150, 160);\n            };\n            var drawRotated3 = function drawRotated3() {\n                ctx.rotate(Math.PI / 2);\n                ctx.globalCompositeOperation = \"source-over\";\n                ctx.drawImage(arrow, centerX - 75, -670, 150, 160);\n                ctx.restore();\n            };\n            var drawRotated6 = function drawRotated6() {\n                ctx.rotate(Math.PI);\n                ctx.drawImage(arrow, centerX - 685, -650, 170, 160);\n                ctx.restore();\n            };\n            var drawRotated9 = function drawRotated9() {\n                ctx.rotate(Math.PI * 7 / 4.7);\n                ctx.drawImage(arrow, -388, -50, 170, 160);\n                ctx.restore();\n            };\n            if (ArrowPos == \"At-12\") {\n                drawRotate12();\n            } else if (ArrowPos == \"At-6\") {\n                drawRotated6();\n            } else if (ArrowPos == \"At-9\") {\n                drawRotated9();\n            } else if (ArrowPos == \"At-3\") {\n                drawRotated3();\n            }\n        };\n        //   if(!localStorage.getItem(\"ArrowImage\")===null){\n        //     arrow.src = localStorage.getItem(\"ArrowImage\")\n        //   }\n        //   else{\n        //   arrow.src = \"arrow.png\"\n        // }\n        if (ArrowPos == \"At-12\") {\n            change = angleCurrent + Math.PI / 2;\n        } else if (ArrowPos == \"At-6\") {\n            change = angleCurrent + Math.PI * 3 / 2;\n        } else if (ArrowPos == \"At-9\") {\n            change = angleCurrent + Math.PI;\n        } else if (ArrowPos == \"At-3\") {\n            change = angleCurrent;\n        }\n        // console.log(\"ARRR\",change)\n        // ctx.lineWidth = 1;\n        // ctx.strokeStyle = contrastColor;\n        // ctx.fileStyle = contrastColor;\n        // ctx.beginPath();\n        // ctx.moveTo(centerX + 20, centerY - 50);\n        // ctx.lineTo(centerX - 20, centerY - 50);\n        // ctx.lineTo(centerX, centerY - 70);\n        // ctx.closePath();\n        // ctx.fill();\n        // var change = angleCurrent + Math.PI / 2;\n        var i = newsegments.length - Math.floor(change / (Math.PI * 2) * newsegments.length) - 1;\n        if (i < 0) i = i + newsegments.length;\n        ctx.textAlign = 'center';\n        ctx.textBaseline = 'middle';\n        ctx.fillStyle = primaryColor;\n        ctx.font = 'bold 1.5em ' + fontFamily;\n        currentSegment = newsegments[i];\n        isStarted && ctx.fillText(currentSegment, centerX + 10, centerY + size + 50);\n        // var img = new Image()\n        setLogoImg(localStorage.getItem(\"CenterLogo\"));\n    // ctx.drawImage(img,centerX-50,centerY-50,100,100)\n    };\n    var clear = function clear() {\n        var ctx = canvasContext;\n        ctx.clearRect(0, 0, 1000, 800);\n    };\n    return React.createElement(\"div\", {\n        id: \"wheel\"\n    }, React.createElement(\"canvas\", {\n        id: \"canvas\",\n        className: \"CANVAS\",\n        width: \"600\",\n        height: \"600\",\n        style: {\n            marginTop: \"45px\",\n            marginLeft: \"38px\",\n            pointerEvents: isFinished && isOnlyOnce ? 'none' : 'auto'\n        }\n    }));\n};\n_s1(WheelComponent, \"0c9DccRscurFl+DLAUZDzY96ecQ=\");\n_c = WheelComponent;\nmodule.exports = React.memo(WheelComponent);\nvar _c;\n$RefreshReg$(_c, \"WheelComponent\");\n\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./plugins/amazing-spin-wheel-game/index.js\n");

/***/ })

});