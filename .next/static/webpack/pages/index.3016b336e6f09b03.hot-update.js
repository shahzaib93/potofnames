"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/index",{

/***/ "./plugins/amazing-spin-wheel-game/index.js":
/*!**************************************************!*\
  !*** ./plugins/amazing-spin-wheel-game/index.js ***!
  \**************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("/* module decorator */ module = __webpack_require__.nmd(module);\n\nfunction _arrayWithHoles(arr) {\n    if (Array.isArray(arr)) return arr;\n}\nfunction _iterableToArrayLimit(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n    try {\n        for(var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true){\n            _arr.push(_s.value);\n            if (i && _arr.length === i) break;\n        }\n    } catch (err) {\n        _d = true;\n        _e = err;\n    } finally{\n        try {\n            if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n        } finally{\n            if (_d) throw _e;\n        }\n    }\n    return _arr;\n}\nfunction _nonIterableRest() {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\nfunction _slicedToArray(arr, i) {\n    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\nvar _s1 = $RefreshSig$();\nvar React = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\nvar ref4 = __webpack_require__(/*! react-howler */ \"./node_modules/react-howler/lib/index.js\"), ReactHowler = ref4.default;\nvar WheelComponent = function WheelComponent(_ref) {\n    _s1();\n    var shouldWeSpin = _ref.shouldWeSpin, setShouldWeSpin = _ref.setShouldWeSpin;\n    var ref = _slicedToArray(React.useState(false), 2), sound = ref[0], setSound = ref[1];\n    var ref1 = _slicedToArray(React.useState(\"\"), 2), LogoImg = ref1[0], setLogoImg = ref1[1];\n    var ref2 = _slicedToArray(React.useState(\"\"), 2), ArrowImg = ref2[0], setArrowImg = ref2[1];\n    var ref3 = _slicedToArray(React.useState(\"\"), 2), css = ref3[0], setCss = ref3[1];\n    var segments = _ref.segments, newsegments = segments.slice(0, 8), remainingsegments = segments.slice(9, segments.length), spinSeconds = _ref.spinSeconds, segColors = _ref.segColors, winningSegment = _ref.winningSegment, onFinished = _ref.onFinished, _ref$primaryColor = _ref.primaryColor, primaryColor = _ref$primaryColor === void 0 ? 'black' : _ref$primaryColor, _ref$contrastColor = _ref.contrastColor, contrastColor = _ref$contrastColor === void 0 ? 'white' : _ref$contrastColor, _ref$isOnlyOnce = _ref.isOnlyOnce, isOnlyOnce = _ref$isOnlyOnce === void 0 ? true : _ref$isOnlyOnce, _ref$size = _ref.size, size = _ref$size === void 0 ? 290 : _ref$size, _ref$upDuration = _ref.upDuration, upDuration = _ref$upDuration === void 0 ? 100 : _ref$upDuration, _ref$downDuration = _ref.downDuration, downDuration = _ref$downDuration === void 0 ? 1000 : _ref$downDuration, _ref$fontFamily = _ref.fontFamily, fontFamily = _ref$fontFamily === void 0 ? 'proxima-nova' : _ref$fontFamily;\n    var currentSegment = '';\n    var isStarted = false;\n    var _useState = React.useState(false), isFinished = _useState[0], setFinished = _useState[1];\n    var timerHandle = 0;\n    var timerHandleNormal = 0;\n    var timerManualDelay = 50;\n    if (spinSeconds > 60) {\n        timerManualDelay = 60;\n    }\n    // spinSeconds\n    var timerDelay = newsegments.length < timerManualDelay ? timerManualDelay : newsegments.length;\n    var timerDelayNormal = newsegments.length;\n    var angleCurrent = 0;\n    var angleDelta = 0;\n    var angleCurrentNormal = 0;\n    var angleDeltaNormal = 0;\n    var maxSpeedNormal = 0.05;\n    var canvasContext = null;\n    // var maxSpeed = Math.PI / (newsegments.length);\n    var maxSpeed = 4;\n    console.log(\"Total newsegments \".concat(newsegments.length));\n    console.log(\"Max speed \".concat(maxSpeed));\n    console.log(\"Timer delay \".concat(timerManualDelay));\n    var upTime = newsegments.length * upDuration;\n    var downTime = newsegments.length * downDuration;\n    var spinStart = 0;\n    var spinStartNormal = 0;\n    var frames = 0;\n    var framesNormal = 0;\n    var centerX = 300;\n    var centerY = 300;\n    React.useEffect(function() {\n        spinNormal();\n    }, []);\n    React.useEffect(function() {\n        wheelInit();\n    }, [\n        newsegments\n    ]);\n    React.useEffect(function() {\n        if (shouldWeSpin) {\n            var CANVAS = document.getElementById(\"canvas\");\n            CANVAS.classList.remove(\"CANVAS\");\n            console.log(\"IDDDDD\");\n            // console.log(\"shouldspin\",shouldWeSpin)\n            setSound(true);\n            wheelInit();\n            spin();\n            setShouldWeSpin(false);\n        // setSound(false)\n        }\n    }, [\n        shouldWeSpin\n    ]);\n    // React.useEffect(() => {\n    //     wheelInit();\n    // },[])\n    var wheelInit = function wheelInit() {\n        initCanvas();\n        wheelDraw();\n    // spinNormal()\n    };\n    var initCanvas = function initCanvas() {\n        var canvas = document.getElementById('canvas');\n        canvasContext = canvas.getContext('2d');\n    // var background = new Image();\n    // background.src = \"../wheel_frame.png\";\n    // canvasContext.drawImage(background,100,100,4000,2770);  \n    // var spinBtn = document.getElementById('spinBtn');\n    // console.log(\"33333\");\n    // spinBtn.addEventListener('click', spin, false);\n    };\n    var spinNormal = function spin() {\n        // console.log(\"spinning\")\n        isStarted = true;\n        if (timerHandleNormal === 0) {\n            spinStartNormal = new Date().getTime();\n            // console.log(\"WHEELSPEED\",Math.PI / newsegments.length)\n            // maxSpeed = 0.1;\n            framesNormal = 0;\n        }\n        timerHandleNormal = setInterval(onTimerTickNormal, maxSpeedNormal);\n        // console.log(\"WHEELTimer\",timerHandleNormal)\n        console.log(\"WHEELontimertick\", timerHandleNormal);\n    };\n    var count = 1;\n    var mainCount = 0;\n    var onTimerTickNormal = function onTimerTickNormal() {\n        // performance.now()\n        var duration = new Date().getTime() - spinStartNormal;\n        // console.log(`WHEELduration ${duration}`);\n        framesNormal++;\n        // console.log(\"WHEELtimer\",timerDelay)\n        //   console.log(\"WHEELSpeed\",maxSpeedNormal)\n        //   console.log(\"WHEELDelta\",angleDeltaNormal)\n        //   console.log(\"WHEELCurrent\",angleCurrentNormal)\n        var ctx = canvasContext;\n        var lastAngle = angleCurrentNormal;\n        var len = newsegments.length;\n        // console.log(\"WHEELSEGSSS\",newsegments)\n        var PI2 = Math.PI * 2;\n        ctx.lineWidth = 1;\n        ctx.strokeStyle = primaryColor;\n        ctx.textBaseline = 'middle';\n        ctx.textAlign = 'center';\n        ctx.font = '1em ' + fontFamily;\n        var fixedNoofSeg = 8;\n        var fixedAngle = 4.8;\n        // console.log(\"WHEELsegs\",newsegments)\n        var num = 0;\n        for(var i = 1; i <= len; i++){\n            // console.log(\"WHEELlen\")\n            var angle = PI2 * (i / len) + angleCurrentNormal;\n            // console.log(\"WHEELangleangle\",angle)\n            // console.log(\"WHEELin\",i)\n            drawSegmentNormal(i - 1, lastAngle, angle);\n            lastAngle = angle;\n        }\n        // console.log(\"WHEELnum\",num)\n        angleCurrentNormal += maxSpeedNormal;\n        // ctx.beginPath();\n        // ctx.arc(centerX, centerY, 50, 0, PI2, false);\n        // ctx.closePath();\n        // // ctx.fillStyle = primaryColor;\n        // ctx.lineWidth = 10;\n        // ctx.strokeStyle = contrastColor;\n        // ctx.fill();\n        // ctx.font = 'bold 1em ' + fontFamily;\n        // ctx.fillStyle = contrastColor;\n        // ctx.textAlign = 'center';\n        // // ctx.fillText(buttonText, centerX, centerY + 3);\n        // ctx.stroke();\n        // ctx.beginPath();\n        // ctx.arc(centerX, centerY, size, 0, PI2, false);\n        // ctx.closePath();\n        // ctx.lineWidth = 10;\n        // ctx.strokeStyle = primaryColor;\n        // ctx.stroke();\n        // var duration = new Date().getTime() - spinStart;\n        // console.log(`duration ${duration}`);\n        // var progress = 0;\n        // var finished = false;\n        // console.log(\"WHEELmaxspeed\",maxSpeedNormal)\n        // angleDeltaNormal = maxSpeedNormal\n        // if (duration < upTime) {\n        // console.log(\"WHEELLLLLLL\",duration / upTime)\n        // progress = duration / upTime;\n        // // console.log(`progress ${progress}`)\n        // // console.log(`upTime ${upTime}`)\n        // angleDelta = maxSpeed * Math.sin(progress * Math.PI / 2)\n        // } else {\n        // if (winningSegment) {\n        //   if (currentSegment === winningSegment && frames > newsegments.length) {\n        //     progress = duration / upTime;\n        //     angleDelta = maxSpeed * Math.sin(progress * Math.PI / 2 + Math.PI / 2);\n        //     progress = 1;\n        //   } else {\n        //     progress = duration / downTime;\n        //     angleDelta = maxSpeed * Math.sin(progress * Math.PI / 2 + Math.PI / 2);\n        //   }\n        // } else {\n        // progress = duration / downTime;\n        // angleDelta = maxSpeed * Math.sin(progress * Math.PI / 2 + Math.PI / 2);\n        // if (progress >= 1) finished = true;\n        // console.log(`progress ${progress}`);\n        // }\n        // angleCurrentNormal += angleDeltaNormal;\n        // console.log(\"angle+\",angleCurrent)\n        while(angleCurrentNormal >= Math.PI * 2){\n            angleCurrentNormal -= Math.PI * 2;\n        // console.log(\"angle-\",angleCurrentNormal)\n        }\n    // if (finished) {\n    //   setFinished(true);\n    //   onFinished(currentSegment);\n    //   clearInterval(timerHandle);\n    //   timerHandle = 0;\n    //   angleDelta = 0;\n    // }\n    };\n    var fix = 8;\n    var drawSegmentNormal = function drawSegmentNormal(key, lastAngle, angle) {\n        //   function drawImageRot(img,x,y,width,height,deg){\n        //     ctx.save()\n        //     var rad = deg\n        //     ctx.translate(x + width / 2, y + height / 2);\n        //     ctx.rotate(rad);\n        //     ctx.drawImage(img,width / 2 * (-1),height / 2 * (-1),width,height)\n        //     ctx.restore();\n        // }\n        //   var img = new Image()\n        //   if(LogoImg!=\"\" && LogoImg != null){\n        //     img.src = LogoImg\n        //   }\n        //   else{\n        //   img.src = \"roundlogo.png\"}\n        //   img.onload = function() {\n        //     // drawImageRot(img,centerX-50,centerY-50,100,100,angle)\n        //     ctx.drawImage(img,centerX-50,centerY-50,100,100)\n        // };\n        // if (angle==4.487989505128276){\n        //   console.log(\"WHEELan\")\n        // }\n        var ctx = canvasContext;\n        // console.log(\"WHEELRemainsegs\",remainingsegments)\n        var value = newsegments[key];\n        // if(3 == Math.ceil(angle) || 3==Math.floor(angle) ){\n        // console.log(\"WHEELanglecount\",value,key)\n        if (value == \"Kayani\") {\n            // console.log(\"WHEELan\",Math.trunc(angleCurrentNormal))\n            if (Math.trunc(angleCurrentNormal) == newsegments.indexOf(\"Kayani\")) {\n                console.log(\"WHEELat\");\n            }\n        }\n        //     console.log(\"WHEELanglecountseg\",count)\n        //     // newsegments[key] =lst[key] \n        //     count+=1\n        // }\n        // if(value==\"Asif\"){\n        //   console.log(\"WHEELpoint\",angleCurrentNormal+8)\n        // }\n        if (Math.trunc(angleCurrentNormal) + 8.02 == 8.02 || Math.trunc(angleCurrentNormal) + 8.03 == 8.03) {\n            // if(value==newsegments[0]){\n            console.log(\"WHEELname\", key);\n            // newsegments[key] = `Asif${angleCurrentNormal.toFixed(2)}`\n            // newsegments.remove()\n            // newsegments.push(remainingsegments[0])\n            if (count % 33 == 1) {\n                newsegments[0] = newsegments[1];\n                // newsegments[0] = remainingsegments[Math.floor(Math.random() * remainingsegments.length)]\n                // remainingsegments[count] = newsegments[key]\n                // if(value==\"Asif\"  ){\n                mainCount += 1;\n            }\n            if (mainCount > 7) {\n                count = 1;\n                mainCount = 1;\n            } else {\n                count += 1;\n            }\n            // }\n            console.log(\"WHEELcounter\", count % 33, \"maincount\", mainCount);\n            // if(count/33>8){\n            //   count=1\n            // }\n            // if(count-33==count){\n            // mainCount+=1\n            console.log(\"WHEELLL\", count);\n            // }\n            // if(count>newsegments.length-1){\n            //   count=0\n            // }\n            // }\n            console.log(\"WHEELcount\", count);\n        // fix+=8\n        }\n        // console.log(\"WHEELvalue\",key)\n        ctx.save();\n        ctx.beginPath();\n        ctx.moveTo(centerX, centerY);\n        ctx.arc(centerX, centerY, size, lastAngle, angle, false);\n        ctx.lineTo(centerX, centerY);\n        ctx.closePath();\n        ctx.fillStyle = segColors[key];\n        ctx.fill();\n        ctx.stroke();\n        ctx.save();\n        ctx.translate(centerX, centerY);\n        // console.log(\"WHEELanglean\",(lastAngle + angle) / 2)\n        ctx.rotate((lastAngle + angle) / 2);\n        ctx.fillStyle = contrastColor;\n        ctx.font = 'bold 1em ' + fontFamily;\n        ctx.fillText(value.substr(0, 21), size / 2 + 20, 0);\n        ctx.restore();\n    };\n    var spin = function spin() {\n        console.log(\"spinning\");\n        isStarted = true;\n        if (timerHandle === 0) {\n            spinStart = new Date().getTime();\n            maxSpeed = Math.PI / newsegments.length;\n            frames = 0;\n            timerHandle = setInterval(onTimerTick, timerDelay);\n        }\n    };\n    var onTimerTick = function onTimerTick() {\n        frames++;\n        draw();\n        var duration = new Date().getTime() - spinStart;\n        console.log(\"duration \".concat(duration));\n        var progress = 0;\n        var finished = false;\n        if (duration < upTime) {\n            progress = duration / upTime;\n            console.log(\"progress \".concat(progress));\n            console.log(\"upTime \".concat(upTime));\n            angleDelta = maxSpeed * Math.sin(progress * Math.PI / 2);\n        } else {\n            if (winningSegment) {\n                if (currentSegment === winningSegment && frames > newsegments.length) {\n                    progress = duration / upTime;\n                    angleDelta = maxSpeed * Math.sin(progress * Math.PI / 2 + Math.PI / 2);\n                    progress = 1;\n                } else {\n                    progress = duration / downTime;\n                    angleDelta = maxSpeed * Math.sin(progress * Math.PI / 2 + Math.PI / 2);\n                }\n            } else {\n                progress = duration / downTime;\n                angleDelta = maxSpeed * Math.sin(progress * Math.PI / 2 + Math.PI / 2);\n            }\n            if (progress >= 1) finished = true;\n            console.log(\"progress \".concat(progress));\n        }\n        angleCurrent += angleDelta;\n        while(angleCurrent >= Math.PI * 2){\n            angleCurrent -= Math.PI * 2;\n        }\n        if (finished) {\n            setFinished(true);\n            onFinished(currentSegment);\n            clearInterval(timerHandle);\n            timerHandle = 0;\n            angleDelta = 0;\n        }\n    };\n    var wheelDraw = function wheelDraw() {\n        clear();\n        drawWheel();\n        drawNeedle();\n    };\n    var draw = function draw() {\n        clear();\n        drawWheel();\n        drawNeedle();\n    };\n    var drawSegment = function drawSegment(key, lastAngle, angle) {\n        var drawImageRot = function drawImageRot(img, x, y, width, height, deg) {\n            ctx.save();\n            var rad = deg;\n            ctx.translate(x + width / 2, y + height / 2);\n            ctx.rotate(rad);\n            ctx.drawImage(img, width / 2 * -1, height / 2 * -1, width, height);\n            ctx.restore();\n        };\n        var img1 = new Image();\n        if (LogoImg != \"\" && LogoImg != null) {\n            img1.src = LogoImg;\n        } else {\n            img1.src = \"roundlogo.png\";\n        }\n        img1.onload = function() {\n            drawImageRot(img1, centerX - 50, centerY - 50, 100, 100, angle);\n        };\n        if (angle == 4.487989505128276) {\n            console.log(\"WHEELan\");\n        }\n        var ctx = canvasContext;\n        console.log();\n        var value = newsegments[key];\n        console.log(\"WHEELvalue\", value);\n        ctx.save();\n        ctx.beginPath();\n        ctx.moveTo(centerX, centerY);\n        ctx.arc(centerX, centerY, size, lastAngle, angle, false);\n        ctx.lineTo(centerX, centerY);\n        ctx.closePath();\n        ctx.fillStyle = segColors[key];\n        ctx.fill();\n        ctx.stroke();\n        ctx.save();\n        ctx.translate(centerX, centerY);\n        ctx.rotate((lastAngle + angle) / 2);\n        ctx.fillStyle = contrastColor;\n        ctx.font = 'bold 1em ' + fontFamily;\n        ctx.fillText(value.substr(0, 21), size / 2 + 20, 0);\n        ctx.restore();\n    };\n    var drawWheel = function drawWheel() {\n        var ctx = canvasContext;\n        // var Wheelimg = new Image()\n        // Wheelimg.src = \"wheel_frame.png\"\n        // Wheelimg.onload = function(){\n        // ctx.drawImage(Wheelimg,-50,-100,700,900)\n        // }\n        var lastAngle = angleCurrent;\n        var len = newsegments.length;\n        var PI2 = Math.PI * 2;\n        ctx.lineWidth = 1;\n        ctx.strokeStyle = primaryColor;\n        ctx.textBaseline = 'middle';\n        ctx.textAlign = 'center';\n        ctx.font = '1em ' + fontFamily;\n        var fixedNoofSeg = 8;\n        var fixedAngle = 4.8;\n        console.log(\"WHEELsegs\", newsegments);\n        for(var i = 1; i <= len; i++){\n            var angle = PI2 * (i / len) + angleCurrent;\n            // console.log(\"WHEELangle\",angleCurrent)\n            drawSegment(i - 1, lastAngle, angle);\n            lastAngle = angle;\n        }\n        ctx.beginPath();\n        ctx.arc(centerX, centerY, 50, 0, PI2, false);\n        ctx.closePath();\n        // ctx.fillStyle = primaryColor;\n        ctx.lineWidth = 10;\n        ctx.strokeStyle = contrastColor;\n        ctx.fill();\n        ctx.font = 'bold 1em ' + fontFamily;\n        ctx.fillStyle = contrastColor;\n        ctx.textAlign = 'center';\n        // ctx.fillText(buttonText, centerX, centerY + 3);\n        ctx.stroke();\n    // ctx.beginPath();\n    // ctx.arc(centerX, centerY, size, 0, PI2, false);\n    // ctx.closePath();\n    // ctx.lineWidth = 10;\n    // ctx.strokeStyle = primaryColor;\n    // ctx.stroke();\n    };\n    var drawNeedle = function drawNeedle() {\n        var arrow = new Image();\n        var change;\n        var ArrowPos = \"\";\n        console.log(\"ARROW\", ArrowPos);\n        if (localStorage.getItem(\"ArrowPosition\") !== null) {\n            ArrowPos = localStorage.getItem(\"ArrowPosition\");\n        } else {\n            ArrowPos = \"At-3\";\n            change = angleCurrent;\n        }\n        var ctx = canvasContext;\n        arrow.onload = function() {\n            var drawRotate12 = function drawRotate12() {\n                ctx.drawImage(arrow, 225, -55, 150, 160);\n            };\n            var drawRotated3 = function drawRotated3() {\n                ctx.rotate(Math.PI / 2);\n                ctx.globalCompositeOperation = \"source-over\";\n                ctx.drawImage(arrow, centerX - 75, -670, 150, 160);\n                ctx.restore();\n            };\n            var drawRotated6 = function drawRotated6() {\n                ctx.rotate(Math.PI);\n                ctx.drawImage(arrow, centerX - 685, -650, 170, 160);\n                ctx.restore();\n            };\n            var drawRotated9 = function drawRotated9() {\n                ctx.rotate(Math.PI * 7 / 4.7);\n                ctx.drawImage(arrow, -388, -50, 170, 160);\n                ctx.restore();\n            };\n            if (ArrowPos == \"At-12\") {\n                drawRotate12();\n            } else if (ArrowPos == \"At-6\") {\n                drawRotated6();\n            } else if (ArrowPos == \"At-9\") {\n                drawRotated9();\n            } else if (ArrowPos == \"At-3\") {\n                drawRotated3();\n            }\n        };\n        //   if(!localStorage.getItem(\"ArrowImage\")===null){\n        //     arrow.src = localStorage.getItem(\"ArrowImage\")\n        //   }\n        //   else{\n        //   arrow.src = \"arrow.png\"\n        // }\n        if (ArrowPos == \"At-12\") {\n            change = angleCurrent + Math.PI / 2;\n        } else if (ArrowPos == \"At-6\") {\n            change = angleCurrent + Math.PI * 3 / 2;\n        } else if (ArrowPos == \"At-9\") {\n            change = angleCurrent + Math.PI;\n        } else if (ArrowPos == \"At-3\") {\n            change = angleCurrent;\n        }\n        console.log(\"ARRR\", change);\n        // ctx.lineWidth = 1;\n        // ctx.strokeStyle = contrastColor;\n        // ctx.fileStyle = contrastColor;\n        // ctx.beginPath();\n        // ctx.moveTo(centerX + 20, centerY - 50);\n        // ctx.lineTo(centerX - 20, centerY - 50);\n        // ctx.lineTo(centerX, centerY - 70);\n        // ctx.closePath();\n        // ctx.fill();\n        // var change = angleCurrent + Math.PI / 2;\n        var i = newsegments.length - Math.floor(change / (Math.PI * 2) * newsegments.length) - 1;\n        if (i < 0) i = i + newsegments.length;\n        ctx.textAlign = 'center';\n        ctx.textBaseline = 'middle';\n        ctx.fillStyle = primaryColor;\n        ctx.font = 'bold 1.5em ' + fontFamily;\n        currentSegment = newsegments[i];\n        isStarted && ctx.fillText(currentSegment, centerX + 10, centerY + size + 50);\n        // var img = new Image()\n        setLogoImg(localStorage.getItem(\"CenterLogo\"));\n    // ctx.drawImage(img,centerX-50,centerY-50,100,100)\n    };\n    var clear = function clear() {\n        var ctx = canvasContext;\n        ctx.clearRect(0, 0, 1000, 800);\n    };\n    return React.createElement(\"div\", {\n        id: \"wheel\"\n    }, React.createElement(\"canvas\", {\n        id: \"canvas\",\n        className: \"CANVAS\",\n        width: \"600\",\n        height: \"600\",\n        style: {\n            marginTop: \"45px\",\n            marginLeft: \"38px\",\n            pointerEvents: isFinished && isOnlyOnce ? 'none' : 'auto'\n        }\n    }));\n};\n_s1(WheelComponent, \"VA7NLdMfprJDh3rXNqpvmETz0XY=\");\n_c = WheelComponent;\nmodule.exports = React.memo(WheelComponent);\nvar _c;\n$RefreshReg$(_c, \"WheelComponent\");\n\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9wbHVnaW5zL2FtYXppbmctc3Bpbi13aGVlbC1nYW1lL2luZGV4LmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSxHQUFHLENBQUNBLEtBQUssR0FBR0MsbUJBQU8sQ0FBQyw0Q0FBTztBQUMzQixHQUFLLENBQTRCQSxJQUF1QixHQUF2QkEsbUJBQU8sQ0FBQyw4REFBYyxHQUF0Q0MsV0FBVyxHQUFLRCxJQUF1QixDQUFoREUsT0FBTztBQUNmLEdBQUcsQ0FBQ0MsY0FBYyxHQUFHLFFBQVEsQ0FBQ0EsY0FBYyxDQUFDQyxJQUFJLEVBQUUsQ0FBQzs7SUFDbEQsR0FBSyxDQUFFQyxZQUFZLEdBQXFCRCxJQUFJLENBQXJDQyxZQUFZLEVBQUVDLGVBQWUsR0FBSUYsSUFBSSxDQUF2QkUsZUFBZTtJQUNwQyxHQUFLLENBQXFCUCxHQUFxQixrQkFBckJBLEtBQUssQ0FBQ1EsUUFBUSxDQUFDLEtBQUssT0FBdkNDLEtBQUssR0FBY1QsR0FBcUIsS0FBakNVLFFBQVEsR0FBSVYsR0FBcUI7SUFDL0MsR0FBSyxDQUF5QkEsSUFBa0Isa0JBQWxCQSxLQUFLLENBQUNRLFFBQVEsQ0FBQyxDQUFFLFFBQXhDRyxPQUFPLEdBQWdCWCxJQUFrQixLQUFoQ1ksVUFBVSxHQUFJWixJQUFrQjtJQUNoRCxHQUFLLENBQTJCQSxJQUFrQixrQkFBbEJBLEtBQUssQ0FBQ1EsUUFBUSxDQUFDLENBQUUsUUFBMUNLLFFBQVEsR0FBaUJiLElBQWtCLEtBQWpDYyxXQUFXLEdBQUlkLElBQWtCO0lBQ2xELEdBQUssQ0FBZ0JBLElBQWtCLGtCQUFsQkEsS0FBSyxDQUFDUSxRQUFRLENBQUMsQ0FBRSxRQUEvQk8sR0FBRyxHQUFXZixJQUFrQixLQUE1QmdCLE1BQU0sR0FBSWhCLElBQWtCO0lBRXZDLEdBQUcsQ0FBQ2lCLFFBQVEsR0FBR1osSUFBSSxDQUFDWSxRQUFRLEVBQ3hCQyxXQUFXLEdBQUdELFFBQVEsQ0FBQ0UsS0FBSyxDQUFDLENB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RSxDQUFNO1lBQ2xCQyxhQUFhLEVBQUV4SCxVQUFVLElBQUlaLFVBQVUsR0FBRyxDQUFNLFFBQUcsQ0FBTTtRQUUzRCxDQUFDO0lBQ0gsQ0FBQztBQUNILENBQUM7SUExb0JHM0IsY0FBYztLQUFkQSxjQUFjO0FBNG9CbEJnSyxNQUFNLENBQUNDLE9BQU8sR0FBR3JLLEtBQUssQ0FBQ3NLLElBQUksQ0FBQ2xLLGNBQWMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vcGx1Z2lucy9hbWF6aW5nLXNwaW4td2hlZWwtZ2FtZS9pbmRleC5qcz83NTVhIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XHJcbmNvbnN0IHsgZGVmYXVsdDogUmVhY3RIb3dsZXIgfSA9IHJlcXVpcmUoJ3JlYWN0LWhvd2xlcicpO1xyXG52YXIgV2hlZWxDb21wb25lbnQgPSBmdW5jdGlvbiBXaGVlbENvbXBvbmVudChfcmVmKSB7XHJcbiAgY29uc3Qge3Nob3VsZFdlU3Bpbiwgc2V0U2hvdWxkV2VTcGlufSA9IF9yZWY7XHJcbiAgY29uc3QgW3NvdW5kLCBzZXRTb3VuZF0gPSBSZWFjdC51c2VTdGF0ZShmYWxzZSk7XHJcbiAgY29uc3QgW0xvZ29JbWcsIHNldExvZ29JbWddID0gUmVhY3QudXNlU3RhdGUoXCJcIik7XHJcbiAgY29uc3QgW0Fycm93SW1nLCBzZXRBcnJvd0ltZ10gPSBSZWFjdC51c2VTdGF0ZShcIlwiKTtcclxuICBjb25zdCBbY3NzLHNldENzc10gPSBSZWFjdC51c2VTdGF0ZShcIlwiKVxyXG5cclxuICB2YXIgc2VnbWVudHMgPSBfcmVmLnNlZ21lbnRzLFxyXG4gICAgICBuZXdzZWdtZW50cyA9IHNlZ21lbnRzLnNsaWNlKDAsOCksXHJcbiAgICAgIHJlbWFpbmluZ3NlZ21lbnRzID0gc2VnbWVudHMuc2xpY2UoOSxzZWdtZW50cy5sZW5ndGgpLFxyXG4gICAgICBzcGluU2Vjb25kcyA9IF9yZWYuc3BpblNlY29uZHMsXHJcbiAgICAgIHNlZ0NvbG9ycyA9IF9yZWYuc2VnQ29sb3JzLFxyXG4gICAgICB3aW5uaW5nU2VnbWVudCA9IF9yZWYud2lubmluZ1NlZ21lbnQsXHJcbiAgICAgIG9uRmluaXNoZWQgPSBfcmVmLm9uRmluaXNoZWQsXHJcbiAgICAgIF9yZWYkcHJpbWFyeUNvbG9yID0gX3JlZi5wcmltYXJ5Q29sb3IsXHJcbiAgICAgIHByaW1hcnlDb2xvciA9IF9yZWYkcHJpbWFyeUNvbG9yID09PSB2b2lkIDAgPyAnYmxhY2snIDogX3JlZiRwcmltYXJ5Q29sb3IsXHJcbiAgICAgIF9yZWYkY29udHJhc3RDb2xvciA9IF9yZWYuY29udHJhc3RDb2xvcixcclxuICAgICAgY29udHJhc3RDb2xvciA9IF9yZWYkY29udHJhc3RDb2xvciA9PT0gdm9pZCAwID8gJ3doaXRlJyA6IF9yZWYkY29udHJhc3RDb2xvcixcclxuICAgICAgX3JlZiRpc09ubHlPbmNlID0gX3JlZi5pc09ubHlPbmNlLFxyXG4gICAgICBpc09ubHlPbmNlID0gX3JlZiRpc09ubHlPbmNlID09PSB2b2lkIDAgPyB0cnVlIDogX3JlZiRpc09ubHlPbmNlLFxyXG4gICAgICBfcmVmJHNpemUgPSBfcmVmLnNpemUsXHJcbiAgICAgIHNpemUgPSBfcmVmJHNpemUgPT09IHZvaWQgMCA/IDI5MCA6IF9yZWYkc2l6ZSxcclxuICAgICAgX3JlZiR1cER1cmF0aW9uID0gX3JlZi51cER1cmF0aW9uLFxyXG4gICAgICB1cER1cmF0aW9uID0gX3JlZiR1cER1cmF0aW9uID09PSB2b2lkIDAgPyAxMDAgOiBfcmVmJHVwRHVyYXRpb24sXHJcbiAgICAgIF9yZWYkZG93bkR1cmF0aW9uID0gX3JlZi5kb3duRHVyYXRpb24sXHJcbiAgICAgIGRvd25EdXJhdGlvbiA9IF9yZWYkZG93bkR1cmF0aW9uID09PSB2b2lkIDAgPyAxMDAwIDogX3JlZiRkb3duRHVyYXRpb24sXHJcbiAgICAgIF9yZWYkZm9udEZhbWlseSA9IF9yZWYuZm9udEZhbWlseSxcclxuICAgICAgZm9udEZhbWlseSA9IF9yZWYkZm9udEZhbWlseSA9PT0gdm9pZCAwID8gJ3Byb3hpbWEtbm92YScgOiBfcmVmJGZvbnRGYW1pbHk7XHJcbiAgdmFyIGN1cnJlbnRTZWdtZW50ID0gJyc7XHJcbiAgdmFyIGlzU3RhcnRlZCA9IGZhbHNlO1xyXG5cclxuICB2YXIgX3VzZVN0YXRlID0gUmVhY3QudXNlU3RhdGUoZmFsc2UpLFxyXG4gICAgICBpc0ZpbmlzaGVkID0gX3VzZVN0YXRlWzBdLFxyXG4gICAgICBzZXRGaW5pc2hlZCA9IF91c2VTdGF0ZVsxXTtcclxuXHJcbiAgdmFyIHRpbWVySGFuZGxlID0gMFxyXG4gIHZhciB0aW1lckhhbmRsZU5vcm1hbCA9IDBcclxuICB2YXIgdGltZXJNYW51YWxEZWxheSA9IDUwXHJcbiAgaWYoc3BpblNlY29uZHMgPiA2MCl7XHJcbiAgICB0aW1lck1hbnVhbERlbGF5ID0gNjBcclxuICB9XHJcbiAgLy8gc3BpblNlY29uZHNcclxuICB2YXIgdGltZXJEZWxheSA9IChuZXdzZWdtZW50cy5sZW5ndGggPCB0aW1lck1hbnVhbERlbGF5ICA/IHRpbWVyTWFudWFsRGVsYXkgOiBuZXdzZWdtZW50cy5sZW5ndGgpO1xyXG4gIHZhciB0aW1lckRlbGF5Tm9ybWFsID0gbmV3c2VnbWVudHMubGVuZ3RoXHJcbiAgdmFyIGFuZ2xlQ3VycmVudCA9IDBcclxuICB2YXIgYW5nbGVEZWx0YSA9IDBcclxuICB2YXIgYW5nbGVDdXJyZW50Tm9ybWFsID0gMFxyXG4gIHZhciBhbmdsZURlbHRhTm9ybWFsID0gMFxyXG4gIHZhciBtYXhTcGVlZE5vcm1hbCA9IDAuMDVcclxuXHJcbiAgdmFyIGNhbnZhc0NvbnRleHQgPSBudWxsXHJcbiAgLy8gdmFyIG1heFNwZWVkID0gTWF0aC5QSSAvIChuZXdzZWdtZW50cy5sZW5ndGgpO1xyXG4gIHZhciBtYXhTcGVlZCA9IDRcclxuICBjb25zb2xlLmxvZyhgVG90YWwgbmV3c2VnbWVudHMgJHtuZXdzZWdtZW50cy5sZW5ndGh9YClcclxuICBjb25zb2xlLmxvZyhgTWF4IHNwZWVkICR7bWF4U3BlZWR9YClcclxuICBjb25zb2xlLmxvZyhgVGltZXIgZGVsYXkgJHt0aW1lck1hbnVhbERlbGF5fWApXHJcbiAgdmFyIHVwVGltZSA9IG5ld3NlZ21lbnRzLmxlbmd0aCAqIHVwRHVyYXRpb25cclxuICB2YXIgZG93blRpbWUgPSBuZXdzZWdtZW50cy5sZW5ndGggKiBkb3duRHVyYXRpb25cclxuICB2YXIgc3BpblN0YXJ0ID0gMFxyXG4gIHZhciBzcGluU3RhcnROb3JtYWwgPSAwXHJcblxyXG4gIHZhciBmcmFtZXMgPSAwXHJcbiAgdmFyIGZyYW1lc05vcm1hbCA9IDBcclxuXHJcbiAgdmFyIGNlbnRlclggPSAzMDBcclxuICB2YXIgY2VudGVyWSA9IDMwMFxyXG5cclxuUmVhY3QudXNlRWZmZWN0KCgpPT57XHJcbiAgc3Bpbk5vcm1hbCgpXHJcblxyXG59LFtdKVxyXG5cclxuICBSZWFjdC51c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xyXG4gICAgXHJcbiAgICB3aGVlbEluaXQoKTtcclxuICB9LCBbbmV3c2VnbWVudHNdKTtcclxuXHJcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcclxuICAgIFxyXG4gICAgaWYoc2hvdWxkV2VTcGluKSB7XHJcbiAgICAgY29uc3QgQ0FOVkFTID0gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiY2FudmFzXCIpXHJcbiAgICAgQ0FOVkFTLmNsYXNzTGlzdC5yZW1vdmUoXCJDQU5WQVNcIilcclxuXHJcbiAgICAgIGNvbnNvbGUubG9nKFwiSUREREREXCIsKVxyXG4gICAgICAvLyBjb25zb2xlLmxvZyhcInNob3VsZHNwaW5cIixzaG91bGRXZVNwaW4pXHJcbiAgICAgICAgc2V0U291bmQodHJ1ZSlcclxuICAgICAgICB3aGVlbEluaXQoKTtcclxuICAgICAgICBzcGluKCk7XHJcbiAgICAgICAgc2V0U2hvdWxkV2VTcGluKGZhbHNlKTtcclxuICAgICBcclxuICAgICAgXHJcbiAgICAgIC8vIHNldFNvdW5kKGZhbHNlKVxyXG4gICAgfVxyXG4gIH0sIFtzaG91bGRXZVNwaW5dKVxyXG5cclxuICAvLyBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xyXG4gIC8vICAgICB3aGVlbEluaXQoKTtcclxuICAvLyB9LFtdKVxyXG5cclxuICB2YXIgd2hlZWxJbml0ID0gZnVuY3Rpb24gd2hlZWxJbml0KCkge1xyXG4gICAgaW5pdENhbnZhcygpO1xyXG4gICAgd2hlZWxEcmF3KCk7XHJcbiAgICAvLyBzcGluTm9ybWFsKClcclxuICB9O1xyXG5cclxuICB2YXIgaW5pdENhbnZhcyA9IGZ1bmN0aW9uIGluaXRDYW52YXMoKSB7XHJcbiAgICB2YXIgY2FudmFzID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NhbnZhcycpO1xyXG4gICAgY2FudmFzQ29udGV4dCA9IGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xyXG4gXHJcblxyXG4gIFxyXG4gICAgLy8gdmFyIGJhY2tncm91bmQgPSBuZXcgSW1hZ2UoKTtcclxuICAgIC8vIGJhY2tncm91bmQuc3JjID0gXCIuLi93aGVlbF9mcmFtZS5wbmdcIjtcclxuICAgIC8vIGNhbnZhc0NvbnRleHQuZHJhd0ltYWdlKGJhY2tncm91bmQsMTAwLDEwMCw0MDAwLDI3NzApOyAgXHJcblxyXG4gICAgLy8gdmFyIHNwaW5CdG4gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc3BpbkJ0bicpO1xyXG4gICAgLy8gY29uc29sZS5sb2coXCIzMzMzM1wiKTtcclxuICAgIC8vIHNwaW5CdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBzcGluLCBmYWxzZSk7XHJcbiAgfTtcclxuXHJcbiAgdmFyIHNwaW5Ob3JtYWwgPSBmdW5jdGlvbiBzcGluKCkge1xyXG4gICAgLy8gY29uc29sZS5sb2coXCJzcGlubmluZ1wiKVxyXG4gICAgaXNTdGFydGVkID0gdHJ1ZTtcclxuXHJcbiAgICBpZiAodGltZXJIYW5kbGVOb3JtYWwgPT09IDApIHtcclxuICAgICAgc3BpblN0YXJ0Tm9ybWFsID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XHJcbiAgICAgIC8vIGNvbnNvbGUubG9nKFwiV0hFRUxTUEVFRFwiLE1hdGguUEkgLyBuZXdzZWdtZW50cy5sZW5ndGgpXHJcbiAgICAgIC8vIG1heFNwZWVkID0gMC4xO1xyXG4gICAgICBmcmFtZXNOb3JtYWwgPSAwO1xyXG4gICAgICBcclxuXHJcblxyXG4gICAgfVxyXG4gICAgdGltZXJIYW5kbGVOb3JtYWwgPSBzZXRJbnRlcnZhbChvblRpbWVyVGlja05vcm1hbCwgbWF4U3BlZWROb3JtYWwpO1xyXG4gICAgLy8gY29uc29sZS5sb2coXCJXSEVFTFRpbWVyXCIsdGltZXJIYW5kbGVOb3JtYWwpXHJcbiAgICBjb25zb2xlLmxvZyhcIldIRUVMb250aW1lcnRpY2tcIix0aW1lckhhbmRsZU5vcm1hbClcclxuXHJcblxyXG4gIH07XHJcblxyXG4gIGNvbnN0IGNvdW50ID0gMVxyXG4gIGNvbnN0IG1haW5Db3VudCA9IDBcclxuXHJcbiAgdmFyIG9uVGltZXJUaWNrTm9ybWFsID0gZnVuY3Rpb24gb25UaW1lclRpY2tOb3JtYWwoKSB7XHJcbiAgICAvLyBwZXJmb3JtYW5jZS5ub3coKVxyXG4gICAgdmFyIGR1cmF0aW9uID0gbmV3IERhdGUoKS5nZXRUaW1lKCkgLSBzcGluU3RhcnROb3JtYWw7XHJcbiAgICAvLyBjb25zb2xlLmxvZyhgV0hFRUxkdXJhdGlvbiAke2R1cmF0aW9ufWApO1xyXG4gICAgZnJhbWVzTm9ybWFsKys7XHJcbiAgICAvLyBjb25zb2xlLmxvZyhcIldIRUVMdGltZXJcIix0aW1lckRlbGF5KVxyXG4gICAgLy8gICBjb25zb2xlLmxvZyhcIldIRUVMU3BlZWRcIixtYXhTcGVlZE5vcm1hbClcclxuICAgIC8vICAgY29uc29sZS5sb2coXCJXSEVFTERlbHRhXCIsYW5nbGVEZWx0YU5vcm1hbClcclxuICAgIC8vICAgY29uc29sZS5sb2coXCJXSEVFTEN1cnJlbnRcIixhbmdsZUN1cnJlbnROb3JtYWwpXHJcbiAgICB2YXIgY3R4ID0gY2FudmFzQ29udGV4dDsgIFxyXG4gICAgdmFyIGxhc3RBbmdsZSA9IGFuZ2xlQ3VycmVudE5vcm1hbDtcclxuICAgIHZhciBsZW4gPSBuZXdzZWdtZW50cy5sZW5ndGg7XHJcbiAgICAvLyBjb25zb2xlLmxvZyhcIldIRUVMU0VHU1NTXCIsbmV3c2VnbWVudHMpXHJcbiAgICB2YXIgUEkyID0gTWF0aC5QSSAqIDI7XHJcbiAgICBjdHgubGluZVdpZHRoID0gMTtcclxuICAgIGN0eC5zdHJva2VTdHlsZSA9IHByaW1hcnlDb2xvcjtcclxuICAgIGN0eC50ZXh0QmFzZWxpbmUgPSAnbWlkZGxlJztcclxuICAgIGN0eC50ZXh0QWxpZ24gPSAnY2VudGVyJztcclxuICAgIGN0eC5mb250ID0gJzFlbSAnICsgZm9udEZhbWlseTtcclxuICAgIFxyXG5jb25zdCBmaXhlZE5vb2ZTZWcgPSA4XHJcbmNvbnN0IGZpeGVkQW5nbGUgPSA0LjhcclxuXHJcbi8vIGNvbnNvbGUubG9nKFwiV0hFRUxzZWdzXCIsbmV3c2VnbWVudHMpXHJcbmNvbnN0IG51bSA9IDBcclxuXHJcbiAgICBmb3IgKHZhciBpID0gMTsgaSA8PSBsZW47IGkrKykge1xyXG4gICAgICAvLyBjb25zb2xlLmxvZyhcIldIRUVMbGVuXCIpXHJcbiAgICAgIFxyXG4gICAgICB2YXIgYW5nbGUgPSBQSTIgKiAoaSAvIGxlbikgKyBhbmdsZUN1cnJlbnROb3JtYWw7XHJcbiAgICAgIC8vIGNvbnNvbGUubG9nKFwiV0hFRUxhbmdsZWFuZ2xlXCIsYW5nbGUpXHJcbiAgICAgIC8vIGNvbnNvbGUubG9nKFwiV0hFRUxpblwiLGkpXHJcbiAgICAgIGRyYXdTZWdtZW50Tm9ybWFsKGkgLSAxLCBsYXN0QW5nbGUsIGFuZ2xlKTtcclxuICAgICAgbGFzdEFuZ2xlID0gYW5nbGU7XHJcbiAgICB9XHJcbiAgICAvLyBjb25zb2xlLmxvZyhcIldIRUVMbnVtXCIsbnVtKVxyXG5cclxuICAgIGFuZ2xlQ3VycmVudE5vcm1hbCs9bWF4U3BlZWROb3JtYWxcclxuICAgIC8vIGN0eC5iZWdpblBhdGgoKTtcclxuICAgIC8vIGN0eC5hcmMoY2VudGVyWCwgY2VudGVyWSwgNTAsIDAsIFBJMiwgZmFsc2UpO1xyXG4gICAgLy8gY3R4LmNsb3NlUGF0aCgpO1xyXG4gICAgLy8gLy8gY3R4LmZpbGxTdHlsZSA9IHByaW1hcnlDb2xvcjtcclxuICAgIC8vIGN0eC5saW5lV2lkdGggPSAxMDtcclxuICAgIC8vIGN0eC5zdHJva2VTdHlsZSA9IGNvbnRyYXN0Q29sb3I7XHJcbiAgICAvLyBjdHguZmlsbCgpO1xyXG4gICAgLy8gY3R4LmZvbnQgPSAnYm9sZCAxZW0gJyArIGZvbnRGYW1pbHk7XHJcbiAgICAvLyBjdHguZmlsbFN0eWxlID0gY29udHJhc3RDb2xvcjtcclxuICAgIC8vIGN0eC50ZXh0QWxpZ24gPSAnY2VudGVyJztcclxuICAgIC8vIC8vIGN0eC5maWxsVGV4dChidXR0b25UZXh0LCBjZW50ZXJYLCBjZW50ZXJZICsgMyk7XHJcbiAgICAvLyBjdHguc3Ryb2tlKCk7XHJcbiAgICAvLyBjdHguYmVnaW5QYXRoKCk7XHJcbiAgICAvLyBjdHguYXJjKGNlbnRlclgsIGNlbnRlclksIHNpemUsIDAsIFBJMiwgZmFsc2UpO1xyXG4gICAgLy8gY3R4LmNsb3NlUGF0aCgpO1xyXG4gICAgLy8gY3R4LmxpbmVXaWR0aCA9IDEwO1xyXG4gICAgLy8gY3R4LnN0cm9rZVN0eWxlID0gcHJpbWFyeUNvbG9yO1xyXG4gICAgLy8gY3R4LnN0cm9rZSgpO1xyXG4gICAgXHJcbiAgICAvLyB2YXIgZHVyYXRpb24gPSBuZXcgRGF0ZSgpLmdldFRpbWUoKSAtIHNwaW5TdGFydDtcclxuICAgIC8vIGNvbnNvbGUubG9nKGBkdXJhdGlvbiAke2R1cmF0aW9ufWApO1xyXG4gICAgLy8gdmFyIHByb2dyZXNzID0gMDtcclxuICAgIC8vIHZhciBmaW5pc2hlZCA9IGZhbHNlO1xyXG4gICAgLy8gY29uc29sZS5sb2coXCJXSEVFTG1heHNwZWVkXCIsbWF4U3BlZWROb3JtYWwpXHJcbiAgICAvLyBhbmdsZURlbHRhTm9ybWFsID0gbWF4U3BlZWROb3JtYWxcclxuXHJcbiAgICAvLyBpZiAoZHVyYXRpb24gPCB1cFRpbWUpIHtcclxuICAgICAgLy8gY29uc29sZS5sb2coXCJXSEVFTExMTExMTFwiLGR1cmF0aW9uIC8gdXBUaW1lKVxyXG4gICAgICAvLyBwcm9ncmVzcyA9IGR1cmF0aW9uIC8gdXBUaW1lO1xyXG4gICAgICAvLyAvLyBjb25zb2xlLmxvZyhgcHJvZ3Jlc3MgJHtwcm9ncmVzc31gKVxyXG4gICAgICAvLyAvLyBjb25zb2xlLmxvZyhgdXBUaW1lICR7dXBUaW1lfWApXHJcbiAgICAgIC8vIGFuZ2xlRGVsdGEgPSBtYXhTcGVlZCAqIE1hdGguc2luKHByb2dyZXNzICogTWF0aC5QSSAvIDIpXHJcbiAgICAvLyB9IGVsc2Uge1xyXG4gICAgICAvLyBpZiAod2lubmluZ1NlZ21lbnQpIHtcclxuICAgICAgLy8gICBpZiAoY3VycmVudFNlZ21lbnQgPT09IHdpbm5pbmdTZWdtZW50ICYmIGZyYW1lcyA+IG5ld3NlZ21lbnRzLmxlbmd0aCkge1xyXG4gICAgICAvLyAgICAgcHJvZ3Jlc3MgPSBkdXJhdGlvbiAvIHVwVGltZTtcclxuICAgICAgLy8gICAgIGFuZ2xlRGVsdGEgPSBtYXhTcGVlZCAqIE1hdGguc2luKHByb2dyZXNzICogTWF0aC5QSSAvIDIgKyBNYXRoLlBJIC8gMik7XHJcbiAgICAgIC8vICAgICBwcm9ncmVzcyA9IDE7XHJcbiAgICAgIC8vICAgfSBlbHNlIHtcclxuICAgICAgLy8gICAgIHByb2dyZXNzID0gZHVyYXRpb24gLyBkb3duVGltZTtcclxuICAgICAgLy8gICAgIGFuZ2xlRGVsdGEgPSBtYXhTcGVlZCAqIE1hdGguc2luKHByb2dyZXNzICogTWF0aC5QSSAvIDIgKyBNYXRoLlBJIC8gMik7XHJcbiAgICAgIC8vICAgfVxyXG4gICAgICAvLyB9IGVsc2Uge1xyXG4gICAgICAgIC8vIHByb2dyZXNzID0gZHVyYXRpb24gLyBkb3duVGltZTtcclxuICAgICAgICAvLyBhbmdsZURlbHRhID0gbWF4U3BlZWQgKiBNYXRoLnNpbihwcm9ncmVzcyAqIE1hdGguUEkgLyAyICsgTWF0aC5QSSAvIDIpO1xyXG4gICAgICBcclxuXHJcbiAgICAgIC8vIGlmIChwcm9ncmVzcyA+PSAxKSBmaW5pc2hlZCA9IHRydWU7XHJcbiAgICAgIC8vIGNvbnNvbGUubG9nKGBwcm9ncmVzcyAke3Byb2dyZXNzfWApO1xyXG4gICAgLy8gfVxyXG5cclxuICAgIC8vIGFuZ2xlQ3VycmVudE5vcm1hbCArPSBhbmdsZURlbHRhTm9ybWFsO1xyXG4gICAgLy8gY29uc29sZS5sb2coXCJhbmdsZStcIixhbmdsZUN1cnJlbnQpXHJcbiAgICB3aGlsZSAoYW5nbGVDdXJyZW50Tm9ybWFsID49IE1hdGguUEkgKiAyKSB7XHJcbiAgICAgIGFuZ2xlQ3VycmVudE5vcm1hbCAtPSBNYXRoLlBJICogMjtcclxuICAgIC8vIGNvbnNvbGUubG9nKFwiYW5nbGUtXCIsYW5nbGVDdXJyZW50Tm9ybWFsKVxyXG5cclxuICAgIH1cclxuXHJcbiAgICAvLyBpZiAoZmluaXNoZWQpIHtcclxuICAgIC8vICAgc2V0RmluaXNoZWQodHJ1ZSk7XHJcbiAgICAvLyAgIG9uRmluaXNoZWQoY3VycmVudFNlZ21lbnQpO1xyXG4gICAgLy8gICBjbGVhckludGVydmFsKHRpbWVySGFuZGxlKTtcclxuICAgIC8vICAgdGltZXJIYW5kbGUgPSAwO1xyXG4gICAgLy8gICBhbmdsZURlbHRhID0gMDtcclxuICAgIC8vIH1cclxuICB9O1xyXG5jb25zdCBmaXggPSA4XHJcbiAgdmFyIGRyYXdTZWdtZW50Tm9ybWFsID0gZnVuY3Rpb24gZHJhd1NlZ21lbnROb3JtYWwoa2V5LCBsYXN0QW5nbGUsIGFuZ2xlKSB7XHJcblxyXG4gIC8vICAgZnVuY3Rpb24gZHJhd0ltYWdlUm90KGltZyx4LHksd2lkdGgsaGVpZ2h0LGRlZyl7XHJcbiAgLy8gICAgIGN0eC5zYXZlKClcclxuICAvLyAgICAgdmFyIHJhZCA9IGRlZ1xyXG4gIC8vICAgICBjdHgudHJhbnNsYXRlKHggKyB3aWR0aCAvIDIsIHkgKyBoZWlnaHQgLyAyKTtcclxuICAvLyAgICAgY3R4LnJvdGF0ZShyYWQpO1xyXG4gIC8vICAgICBjdHguZHJhd0ltYWdlKGltZyx3aWR0aCAvIDIgKiAoLTEpLGhlaWdodCAvIDIgKiAoLTEpLHdpZHRoLGhlaWdodClcclxuICAvLyAgICAgY3R4LnJlc3RvcmUoKTtcclxuICAvLyB9XHJcbiAgLy8gICB2YXIgaW1nID0gbmV3IEltYWdlKClcclxuICAgIFxyXG4gIC8vICAgaWYoTG9nb0ltZyE9XCJcIiAmJiBMb2dvSW1nICE9IG51bGwpe1xyXG4gIC8vICAgICBpbWcuc3JjID0gTG9nb0ltZ1xyXG4gIC8vICAgfVxyXG4gIC8vICAgZWxzZXtcclxuICAvLyAgIGltZy5zcmMgPSBcInJvdW5kbG9nby5wbmdcIn1cclxuICAvLyAgIGltZy5vbmxvYWQgPSBmdW5jdGlvbigpIHtcclxuICAvLyAgICAgLy8gZHJhd0ltYWdlUm90KGltZyxjZW50ZXJYLTUwLGNlbnRlclktNTAsMTAwLDEwMCxhbmdsZSlcclxuICAvLyAgICAgY3R4LmRyYXdJbWFnZShpbWcsY2VudGVyWC01MCxjZW50ZXJZLTUwLDEwMCwxMDApXHJcblxyXG4gIC8vIH07XHJcbiAgLy8gaWYgKGFuZ2xlPT00LjQ4Nzk4OTUwNTEyODI3Nil7XHJcbiAgLy8gICBjb25zb2xlLmxvZyhcIldIRUVMYW5cIilcclxuICAvLyB9XHJcbiAgICB2YXIgY3R4ID0gY2FudmFzQ29udGV4dDtcclxuICAgIC8vIGNvbnNvbGUubG9nKFwiV0hFRUxSZW1haW5zZWdzXCIscmVtYWluaW5nc2VnbWVudHMpXHJcbiAgICB2YXIgdmFsdWUgPSBuZXdzZWdtZW50c1trZXldO1xyXG4gICAgLy8gaWYoMyA9PSBNYXRoLmNlaWwoYW5nbGUpIHx8IDM9PU1hdGguZmxvb3IoYW5nbGUpICl7XHJcbiAgICAvLyBjb25zb2xlLmxvZyhcIldIRUVMYW5nbGVjb3VudFwiLHZhbHVlLGtleSlcclxuXHJcbiAgICBpZih2YWx1ZT09XCJLYXlhbmlcIil7XHJcbiAgICAgIC8vIGNvbnNvbGUubG9nKFwiV0hFRUxhblwiLE1hdGgudHJ1bmMoYW5nbGVDdXJyZW50Tm9ybWFsKSlcclxuICAgICAgaWYoTWF0aC50cnVuYyhhbmdsZUN1cnJlbnROb3JtYWwpPT1uZXdzZWdtZW50cy5pbmRleE9mKFwiS2F5YW5pXCIpKXtcclxuICAgICAgICBjb25zb2xlLmxvZyhcIldIRUVMYXRcIilcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgLy8gICAgIGNvbnNvbGUubG9nKFwiV0hFRUxhbmdsZWNvdW50c2VnXCIsY291bnQpXHJcbiAgICAvLyAgICAgLy8gbmV3c2VnbWVudHNba2V5XSA9bHN0W2tleV0gXHJcbiAgICAvLyAgICAgY291bnQrPTFcclxuICAgICAgXHJcbiAgICAvLyB9XHJcbiAgICAvLyBpZih2YWx1ZT09XCJBc2lmXCIpe1xyXG4gICAgLy8gICBjb25zb2xlLmxvZyhcIldIRUVMcG9pbnRcIixhbmdsZUN1cnJlbnROb3JtYWwrOClcclxuICAgIC8vIH1cclxuICAgIGlmKE1hdGgudHJ1bmMoYW5nbGVDdXJyZW50Tm9ybWFsKSs4LjAyPT04LjAyIHx8IE1hdGgudHJ1bmMoYW5nbGVDdXJyZW50Tm9ybWFsKSs4LjAzPT04LjAzICApe1xyXG4gICAgICAvLyBpZih2YWx1ZT09bmV3c2VnbWVudHNbMF0pe1xyXG4gICAgICBjb25zb2xlLmxvZyhcIldIRUVMbmFtZVwiLGtleSlcclxuICAgICAgLy8gbmV3c2VnbWVudHNba2V5XSA9IGBBc2lmJHthbmdsZUN1cnJlbnROb3JtYWwudG9GaXhlZCgyKX1gXHJcbiAgICAgIC8vIG5ld3NlZ21lbnRzLnJlbW92ZSgpXHJcbiAgICAgIC8vIG5ld3NlZ21lbnRzLnB1c2gocmVtYWluaW5nc2VnbWVudHNbMF0pXHJcbiAgICAgIGlmKGNvdW50JTMzICA9PTEgKXtcclxuICAgICAgICBuZXdzZWdtZW50c1swXT1uZXdzZWdtZW50c1sxXVxyXG4gICAgICAgIC8vIG5ld3NlZ21lbnRzWzBdID0gcmVtYWluaW5nc2VnbWVudHNbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogcmVtYWluaW5nc2VnbWVudHMubGVuZ3RoKV1cclxuICAgICAgICBcclxuICAgICAgICAvLyByZW1haW5pbmdzZWdtZW50c1tjb3VudF0gPSBuZXdzZWdtZW50c1trZXldXHJcbiAgICAgICAgLy8gaWYodmFsdWU9PVwiQXNpZlwiICApe1xyXG4gICAgICAgICAgbWFpbkNvdW50Kz0xXHJcbiAgICAgICAgICBcclxuICAgICAgfVxyXG4gICAgICBpZihtYWluQ291bnQ+Nyl7XHJcbiAgICAgICAgY291bnQ9MVxyXG4gICAgICAgIG1haW5Db3VudCA9IDFcclxuICAgICAgfVxyXG4gICAgICBlbHNle1xyXG4gICAgICAgIGNvdW50Kz0xXHJcbiAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gfVxyXG4gICAgICAgIGNvbnNvbGUubG9nKFwiV0hFRUxjb3VudGVyXCIsY291bnQlMzMsXCJtYWluY291bnRcIixtYWluQ291bnQpXHJcbiAgICAgICAgLy8gaWYoY291bnQvMzM+OCl7XHJcbiAgICAgICAgLy8gICBjb3VudD0xXHJcbiAgICAgICAgLy8gfVxyXG4gICAgICAgIC8vIGlmKGNvdW50LTMzPT1jb3VudCl7XHJcbiAgICAgICAgICAvLyBtYWluQ291bnQrPTFcclxuICAgICAgICAgIGNvbnNvbGUubG9nKFwiV0hFRUxMTFwiLGNvdW50KVxyXG4gICAgICAgIC8vIH1cclxuICAgICAgICAvLyBpZihjb3VudD5uZXdzZWdtZW50cy5sZW5ndGgtMSl7XHJcbiAgICAgICAgLy8gICBjb3VudD0wXHJcbiAgICAgICAgLy8gfVxyXG5cclxuICAgICAgLy8gfVxyXG4gICAgICBjb25zb2xlLmxvZyhcIldIRUVMY291bnRcIixjb3VudClcclxuICAgICAgLy8gZml4Kz04XHJcbiAgICB9XHJcbiAgXHJcbiAgICAvLyBjb25zb2xlLmxvZyhcIldIRUVMdmFsdWVcIixrZXkpXHJcbiAgICBjdHguc2F2ZSgpO1xyXG4gICAgY3R4LmJlZ2luUGF0aCgpO1xyXG4gICAgY3R4Lm1vdmVUbyhjZW50ZXJYLCBjZW50ZXJZKTtcclxuICAgIGN0eC5hcmMoY2VudGVyWCwgY2VudGVyWSwgc2l6ZSwgbGFzdEFuZ2xlLCBhbmdsZSwgZmFsc2UpO1xyXG4gICAgY3R4LmxpbmVUbyhjZW50ZXJYLCBjZW50ZXJZKTtcclxuICAgIGN0eC5jbG9zZVBhdGgoKTtcclxuICAgIGN0eC5maWxsU3R5bGUgPSBzZWdDb2xvcnNba2V5XTtcclxuICAgIGN0eC5maWxsKCk7XHJcbiAgICBjdHguc3Ryb2tlKCk7XHJcbiAgICBjdHguc2F2ZSgpO1xyXG4gICAgY3R4LnRyYW5zbGF0ZShjZW50ZXJYLCBjZW50ZXJZKTtcclxuICAgIC8vIGNvbnNvbGUubG9nKFwiV0hFRUxhbmdsZWFuXCIsKGxhc3RBbmdsZSArIGFuZ2xlKSAvIDIpXHJcbiAgICBjdHgucm90YXRlKChsYXN0QW5nbGUgKyBhbmdsZSkgLyAyKTtcclxuICAgIGN0eC5maWxsU3R5bGUgPSBjb250cmFzdENvbG9yO1xyXG4gICAgY3R4LmZvbnQgPSAnYm9sZCAxZW0gJyArIGZvbnRGYW1pbHk7XHJcbiAgICBjdHguZmlsbFRleHQodmFsdWUuc3Vic3RyKDAsIDIxKSwgc2l6ZSAvIDIgKyAyMCwgMCk7XHJcbiAgICBjdHgucmVzdG9yZSgpO1xyXG4gICAgXHJcbiAgfTtcclxuICB2YXIgc3BpbiA9IGZ1bmN0aW9uIHNwaW4oKSB7XHJcbiAgICBjb25zb2xlLmxvZyhcInNwaW5uaW5nXCIpXHJcbiAgICBpc1N0YXJ0ZWQgPSB0cnVlO1xyXG5cclxuICAgIGlmICh0aW1lckhhbmRsZSA9PT0gMCkge1xyXG4gICAgICBzcGluU3RhcnQgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcclxuICAgICAgbWF4U3BlZWQgPSBNYXRoLlBJIC8gbmV3c2VnbWVudHMubGVuZ3RoO1xyXG4gICAgICBmcmFtZXMgPSAwO1xyXG4gICAgICB0aW1lckhhbmRsZSA9IHNldEludGVydmFsKG9uVGltZXJUaWNrLCB0aW1lckRlbGF5KTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICB2YXIgb25UaW1lclRpY2sgPSBmdW5jdGlvbiBvblRpbWVyVGljaygpIHtcclxuICAgIGZyYW1lcysrO1xyXG4gICAgZHJhdygpO1xyXG4gICAgdmFyIGR1cmF0aW9uID0gbmV3IERhdGUoKS5nZXRUaW1lKCkgLSBzcGluU3RhcnQ7XHJcbiAgICBjb25zb2xlLmxvZyhgZHVyYXRpb24gJHtkdXJhdGlvbn1gKTtcclxuICAgIHZhciBwcm9ncmVzcyA9IDA7XHJcbiAgICB2YXIgZmluaXNoZWQgPSBmYWxzZTtcclxuXHJcbiAgICBpZiAoZHVyYXRpb24gPCB1cFRpbWUpIHtcclxuXHJcbiAgICAgIHByb2dyZXNzID0gZHVyYXRpb24gLyB1cFRpbWU7XHJcbiAgICAgIGNvbnNvbGUubG9nKGBwcm9ncmVzcyAke3Byb2dyZXNzfWApXHJcbiAgICAgIGNvbnNvbGUubG9nKGB1cFRpbWUgJHt1cFRpbWV9YClcclxuICAgICAgYW5nbGVEZWx0YSA9IG1heFNwZWVkICogTWF0aC5zaW4ocHJvZ3Jlc3MgKiBNYXRoLlBJIC8gMilcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGlmICh3aW5uaW5nU2VnbWVudCkge1xyXG4gICAgICAgIGlmIChjdXJyZW50U2VnbWVudCA9PT0gd2lubmluZ1NlZ21lbnQgJiYgZnJhbWVzID4gbmV3c2VnbWVudHMubGVuZ3RoKSB7XHJcbiAgICAgICAgICBwcm9ncmVzcyA9IGR1cmF0aW9uIC8gdXBUaW1lO1xyXG4gICAgICAgICAgYW5nbGVEZWx0YSA9IG1heFNwZWVkICogTWF0aC5zaW4ocHJvZ3Jlc3MgKiBNYXRoLlBJIC8gMiArIE1hdGguUEkgLyAyKTtcclxuICAgICAgICAgIHByb2dyZXNzID0gMTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgcHJvZ3Jlc3MgPSBkdXJhdGlvbiAvIGRvd25UaW1lO1xyXG4gICAgICAgICAgYW5nbGVEZWx0YSA9IG1heFNwZWVkICogTWF0aC5zaW4ocHJvZ3Jlc3MgKiBNYXRoLlBJIC8gMiArIE1hdGguUEkgLyAyKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgcHJvZ3Jlc3MgPSBkdXJhdGlvbiAvIGRvd25UaW1lO1xyXG4gICAgICAgIGFuZ2xlRGVsdGEgPSBtYXhTcGVlZCAqIE1hdGguc2luKHByb2dyZXNzICogTWF0aC5QSSAvIDIgKyBNYXRoLlBJIC8gMik7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmIChwcm9ncmVzcyA+PSAxKSBmaW5pc2hlZCA9IHRydWU7XHJcbiAgICAgIGNvbnNvbGUubG9nKGBwcm9ncmVzcyAke3Byb2dyZXNzfWApO1xyXG4gICAgfVxyXG5cclxuICAgIGFuZ2xlQ3VycmVudCArPSBhbmdsZURlbHRhO1xyXG4gICAgd2hpbGUgKGFuZ2xlQ3VycmVudCA+PSBNYXRoLlBJICogMikge1xyXG4gICAgICBhbmdsZUN1cnJlbnQgLT0gTWF0aC5QSSAqIDI7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGZpbmlzaGVkKSB7XHJcbiAgICAgIHNldEZpbmlzaGVkKHRydWUpO1xyXG4gICAgICBvbkZpbmlzaGVkKGN1cnJlbnRTZWdtZW50KTtcclxuICAgICAgY2xlYXJJbnRlcnZhbCh0aW1lckhhbmRsZSk7XHJcbiAgICAgIHRpbWVySGFuZGxlID0gMDtcclxuICAgICAgYW5nbGVEZWx0YSA9IDA7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgdmFyIHdoZWVsRHJhdyA9IGZ1bmN0aW9uIHdoZWVsRHJhdygpIHtcclxuICAgIGNsZWFyKCk7XHJcbiAgICBkcmF3V2hlZWwoKTtcclxuICAgIGRyYXdOZWVkbGUoKTtcclxuICB9O1xyXG5cclxuICB2YXIgZHJhdyA9IGZ1bmN0aW9uIGRyYXcoKSB7XHJcbiAgICBjbGVhcigpO1xyXG4gICAgZHJhd1doZWVsKCk7XHJcbiAgICBkcmF3TmVlZGxlKCk7XHJcbiAgfTtcclxuXHJcbiAgdmFyIGRyYXdTZWdtZW50ID0gZnVuY3Rpb24gZHJhd1NlZ21lbnQoa2V5LCBsYXN0QW5nbGUsIGFuZ2xlKSB7XHJcblxyXG4gICAgZnVuY3Rpb24gZHJhd0ltYWdlUm90KGltZyx4LHksd2lkdGgsaGVpZ2h0LGRlZyl7XHJcbiAgICAgIGN0eC5zYXZlKClcclxuICAgICAgdmFyIHJhZCA9IGRlZ1xyXG4gICAgICBjdHgudHJhbnNsYXRlKHggKyB3aWR0aCAvIDIsIHkgKyBoZWlnaHQgLyAyKTtcclxuICAgICAgY3R4LnJvdGF0ZShyYWQpO1xyXG4gICAgICBjdHguZHJhd0ltYWdlKGltZyx3aWR0aCAvIDIgKiAoLTEpLGhlaWdodCAvIDIgKiAoLTEpLHdpZHRoLGhlaWdodClcclxuICAgICAgY3R4LnJlc3RvcmUoKTtcclxuICB9XHJcbiAgICB2YXIgaW1nID0gbmV3IEltYWdlKClcclxuICAgIFxyXG4gICAgaWYoTG9nb0ltZyE9XCJcIiAmJiBMb2dvSW1nICE9IG51bGwpe1xyXG4gICAgICBpbWcuc3JjID0gTG9nb0ltZ1xyXG4gICAgfVxyXG4gICAgZWxzZXtcclxuICAgIGltZy5zcmMgPSBcInJvdW5kbG9nby5wbmdcIn1cclxuICAgIGltZy5vbmxvYWQgPSBmdW5jdGlvbigpIHtcclxuICAgICAgZHJhd0ltYWdlUm90KGltZyxjZW50ZXJYLTUwLGNlbnRlclktNTAsMTAwLDEwMCxhbmdsZSlcclxuXHJcbiAgfTtcclxuICBpZiAoYW5nbGU9PTQuNDg3OTg5NTA1MTI4Mjc2KXtcclxuICAgIGNvbnNvbGUubG9nKFwiV0hFRUxhblwiKVxyXG4gIH1cclxuICAgIHZhciBjdHggPSBjYW52YXNDb250ZXh0O1xyXG4gICAgY29uc29sZS5sb2coKVxyXG4gICAgdmFyIHZhbHVlID0gbmV3c2VnbWVudHNba2V5XTtcclxuICAgIGNvbnNvbGUubG9nKFwiV0hFRUx2YWx1ZVwiLHZhbHVlKVxyXG4gICAgY3R4LnNhdmUoKTtcclxuICAgIGN0eC5iZWdpblBhdGgoKTtcclxuICAgIGN0eC5tb3ZlVG8oY2VudGVyWCwgY2VudGVyWSk7XHJcbiAgICBjdHguYXJjKGNlbnRlclgsIGNlbnRlclksIHNpemUsIGxhc3RBbmdsZSwgYW5nbGUsIGZhbHNlKTtcclxuICAgIGN0eC5saW5lVG8oY2VudGVyWCwgY2VudGVyWSk7XHJcbiAgICBjdHguY2xvc2VQYXRoKCk7XHJcbiAgICBjdHguZmlsbFN0eWxlID0gc2VnQ29sb3JzW2tleV07XHJcbiAgICBjdHguZmlsbCgpO1xyXG4gICAgY3R4LnN0cm9rZSgpO1xyXG4gICAgY3R4LnNhdmUoKTtcclxuICAgIGN0eC50cmFuc2xhdGUoY2VudGVyWCwgY2VudGVyWSk7XHJcbiAgICBjdHgucm90YXRlKChsYXN0QW5nbGUgKyBhbmdsZSkgLyAyKTtcclxuICAgIGN0eC5maWxsU3R5bGUgPSBjb250cmFzdENvbG9yO1xyXG4gICAgY3R4LmZvbnQgPSAnYm9sZCAxZW0gJyArIGZvbnRGYW1pbHk7XHJcbiAgICBjdHguZmlsbFRleHQodmFsdWUuc3Vic3RyKDAsIDIxKSwgc2l6ZSAvIDIgKyAyMCwgMCk7XHJcbiAgICBjdHgucmVzdG9yZSgpO1xyXG4gICAgXHJcbiAgfTtcclxuXHJcbiAgdmFyIGRyYXdXaGVlbCA9IGZ1bmN0aW9uIGRyYXdXaGVlbCgpIHtcclxuICAgIHZhciBjdHggPSBjYW52YXNDb250ZXh0O1xyXG5cclxuICAgIC8vIHZhciBXaGVlbGltZyA9IG5ldyBJbWFnZSgpXHJcbiAgICAvLyBXaGVlbGltZy5zcmMgPSBcIndoZWVsX2ZyYW1lLnBuZ1wiXHJcbiAgICAvLyBXaGVlbGltZy5vbmxvYWQgPSBmdW5jdGlvbigpe1xyXG4gICAgLy8gY3R4LmRyYXdJbWFnZShXaGVlbGltZywtNTAsLTEwMCw3MDAsOTAwKVxyXG5cclxuICAgIC8vIH1cclxuICAgIFxyXG4gICAgXHJcbiAgICB2YXIgbGFzdEFuZ2xlID0gYW5nbGVDdXJyZW50O1xyXG4gICAgdmFyIGxlbiA9IG5ld3NlZ21lbnRzLmxlbmd0aDtcclxuICAgIHZhciBQSTIgPSBNYXRoLlBJICogMjtcclxuICAgIGN0eC5saW5lV2lkdGggPSAxO1xyXG4gICAgY3R4LnN0cm9rZVN0eWxlID0gcHJpbWFyeUNvbG9yO1xyXG4gICAgY3R4LnRleHRCYXNlbGluZSA9ICdtaWRkbGUnO1xyXG4gICAgY3R4LnRleHRBbGlnbiA9ICdjZW50ZXInO1xyXG4gICAgY3R4LmZvbnQgPSAnMWVtICcgKyBmb250RmFtaWx5O1xyXG4gICAgXHJcbmNvbnN0IGZpeGVkTm9vZlNlZyA9IDhcclxuY29uc3QgZml4ZWRBbmdsZSA9IDQuOFxyXG5jb25zb2xlLmxvZyhcIldIRUVMc2Vnc1wiLG5ld3NlZ21lbnRzKVxyXG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPD0gbGVuOyBpKyspIHtcclxuICAgICAgdmFyIGFuZ2xlID0gUEkyICogKGkgLyBsZW4pICsgYW5nbGVDdXJyZW50O1xyXG4gICAgICAvLyBjb25zb2xlLmxvZyhcIldIRUVMYW5nbGVcIixhbmdsZUN1cnJlbnQpXHJcbiAgICAgIFxyXG4gICAgICBkcmF3U2VnbWVudChpIC0gMSwgbGFzdEFuZ2xlLCBhbmdsZSk7XHJcbiAgICAgIGxhc3RBbmdsZSA9IGFuZ2xlO1xyXG4gICAgfVxyXG4gICAgY3R4LmJlZ2luUGF0aCgpO1xyXG4gICAgY3R4LmFyYyhjZW50ZXJYLCBjZW50ZXJZLCA1MCwgMCwgUEkyLCBmYWxzZSk7XHJcbiAgICBjdHguY2xvc2VQYXRoKCk7XHJcbiAgICAvLyBjdHguZmlsbFN0eWxlID0gcHJpbWFyeUNvbG9yO1xyXG4gICAgY3R4LmxpbmVXaWR0aCA9IDEwO1xyXG4gICAgY3R4LnN0cm9rZVN0eWxlID0gY29udHJhc3RDb2xvcjtcclxuICAgIGN0eC5maWxsKCk7XHJcbiAgICBjdHguZm9udCA9ICdib2xkIDFlbSAnICsgZm9udEZhbWlseTtcclxuICAgIGN0eC5maWxsU3R5bGUgPSBjb250cmFzdENvbG9yO1xyXG4gICAgY3R4LnRleHRBbGlnbiA9ICdjZW50ZXInO1xyXG4gICAgLy8gY3R4LmZpbGxUZXh0KGJ1dHRvblRleHQsIGNlbnRlclgsIGNlbnRlclkgKyAzKTtcclxuICAgIGN0eC5zdHJva2UoKTtcclxuICAgIC8vIGN0eC5iZWdpblBhdGgoKTtcclxuICAgIC8vIGN0eC5hcmMoY2VudGVyWCwgY2VudGVyWSwgc2l6ZSwgMCwgUEkyLCBmYWxzZSk7XHJcbiAgICAvLyBjdHguY2xvc2VQYXRoKCk7XHJcbiAgICAvLyBjdHgubGluZVdpZHRoID0gMTA7XHJcbiAgICAvLyBjdHguc3Ryb2tlU3R5bGUgPSBwcmltYXJ5Q29sb3I7XHJcbiAgICAvLyBjdHguc3Ryb2tlKCk7XHJcbiAgICBcclxuICAgIFxyXG4gIH07XHJcblxyXG4gIHZhciBkcmF3TmVlZGxlID0gZnVuY3Rpb24gZHJhd05lZWRsZSgpIHtcclxuICAgIHZhciBhcnJvdyA9IG5ldyBJbWFnZSgpXHJcbiAgICBcclxuICAgIHZhciBjaGFuZ2U7XHJcbiAgICB2YXIgQXJyb3dQb3MgPSBcIlwiXHJcbiAgICBjb25zb2xlLmxvZyhcIkFSUk9XXCIsQXJyb3dQb3MpXHJcbiAgICBpZihsb2NhbFN0b3JhZ2UuZ2V0SXRlbShcIkFycm93UG9zaXRpb25cIikhPT1udWxsKXtcclxuICAgICAgQXJyb3dQb3M9bG9jYWxTdG9yYWdlLmdldEl0ZW0oXCJBcnJvd1Bvc2l0aW9uXCIpXHJcbiAgICB9XHJcbiAgICBlbHNle1xyXG4gICAgICBBcnJvd1Bvcz1cIkF0LTNcIlxyXG4gICAgICBjaGFuZ2UgPSBhbmdsZUN1cnJlbnRcclxuXHJcbiAgICB9XHJcbiAgICB2YXIgY3R4ID0gY2FudmFzQ29udGV4dDtcclxuICAgIGFycm93Lm9ubG9hZCA9IGZ1bmN0aW9uKCl7XHJcbiAgICAgIGZ1bmN0aW9uIGRyYXdSb3RhdGUxMigpe1xyXG4gICAgICAgIGN0eC5kcmF3SW1hZ2UoYXJyb3csMjI1LC01NSwxNTAsMTYwKVxyXG4gICAgICAgIH1cclxuICAgICAgICBmdW5jdGlvbiBkcmF3Um90YXRlZDMoKXtcclxuICAgICAgICBjdHgucm90YXRlKE1hdGguUEkvMilcclxuICAgICAgICBjdHguZ2xvYmFsQ29tcG9zaXRlT3BlcmF0aW9uID0gXCJzb3VyY2Utb3ZlclwiO1xyXG4gICAgICAgIGN0eC5kcmF3SW1hZ2UoYXJyb3csY2VudGVyWC03NSwtNjcwLDE1MCwxNjApXHJcbiAgICAgICAgY3R4LnJlc3RvcmUoKVxyXG4gICAgICAgIH1cclxuICAgICAgICBmdW5jdGlvbiBkcmF3Um90YXRlZDYoKXtcclxuICAgICAgICBjdHgucm90YXRlKE1hdGguUEkpO1xyXG4gICAgICAgIGN0eC5kcmF3SW1hZ2UoYXJyb3csY2VudGVyWC02ODUsLTY1MCwxNzAsMTYwKVxyXG4gICAgICAgIGN0eC5yZXN0b3JlKClcclxuICAgICAgICB9XHJcbiAgICAgICAgZnVuY3Rpb24gZHJhd1JvdGF0ZWQ5KCl7IFxyXG4gICAgICAgIGN0eC5yb3RhdGUoTWF0aC5QSSo3LzQuNyk7XHJcbiAgICAgICAgY3R4LmRyYXdJbWFnZShhcnJvdywtMzg4LC01MCwxNzAsMTYwKVxyXG4gICAgICAgIGN0eC5yZXN0b3JlKClcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYoQXJyb3dQb3M9PVwiQXQtMTJcIil7XHJcbiAgICAgICAgICAgICAgICBkcmF3Um90YXRlMTIoKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZWxzZSBpZihBcnJvd1Bvcz09XCJBdC02XCIpe1xyXG4gICAgICAgICAgICAgICAgZHJhd1JvdGF0ZWQ2KClcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZihBcnJvd1Bvcz09XCJBdC05XCIpe1xyXG4gICAgICAgICAgICAgICAgZHJhd1JvdGF0ZWQ5KCkgICAgICBcclxuICAgICAgICB9XHJcbiAgICAgIGVsc2UgaWYoQXJyb3dQb3M9PVwiQXQtM1wiKXtcclxuICAgICAgICAgICAgICBkcmF3Um90YXRlZDMoKSAgICAgXHJcbiAgICAgIH1cclxuICAgIH1cclxuICAvLyAgIGlmKCFsb2NhbFN0b3JhZ2UuZ2V0SXRlbShcIkFycm93SW1hZ2VcIik9PT1udWxsKXtcclxuICAvLyAgICAgYXJyb3cuc3JjID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oXCJBcnJvd0ltYWdlXCIpXHJcbiAgLy8gICB9XHJcbiAgLy8gICBlbHNle1xyXG4gIC8vICAgYXJyb3cuc3JjID0gXCJhcnJvdy5wbmdcIlxyXG4gIC8vIH1cclxuICAgIGlmKEFycm93UG9zPT1cIkF0LTEyXCIpe1xyXG4gICAgIFxyXG4gICAgICBjaGFuZ2UgPSBhbmdsZUN1cnJlbnQgKyBNYXRoLlBJIC8gMjtcclxufVxyXG5cclxuZWxzZSBpZihBcnJvd1Bvcz09XCJBdC02XCIpe1xyXG4gICAgICBcclxuICAgICAgY2hhbmdlID0gYW5nbGVDdXJyZW50ICsgTWF0aC5QSSozIC8gMjtcclxuXHJcbn1cclxuZWxzZSBpZihBcnJvd1Bvcz09XCJBdC05XCIpe1xyXG4gICAgIFxyXG4gICAgICBjaGFuZ2UgPSBhbmdsZUN1cnJlbnQgKyBNYXRoLlBJO1xyXG4gICAgICBcclxufVxyXG5lbHNlIGlmKEFycm93UG9zPT1cIkF0LTNcIil7XHJcbiAgICBcclxuICAgIGNoYW5nZSA9IGFuZ2xlQ3VycmVudFxyXG59XHJcblxyXG5cclxuICAgIGNvbnNvbGUubG9nKFwiQVJSUlwiLGNoYW5nZSlcclxuICAgIC8vIGN0eC5saW5lV2lkdGggPSAxO1xyXG4gICAgLy8gY3R4LnN0cm9rZVN0eWxlID0gY29udHJhc3RDb2xvcjtcclxuICAgIC8vIGN0eC5maWxlU3R5bGUgPSBjb250cmFzdENvbG9yO1xyXG4gICAgLy8gY3R4LmJlZ2luUGF0aCgpO1xyXG4gICAgLy8gY3R4Lm1vdmVUbyhjZW50ZXJYICsgMjAsIGNlbnRlclkgLSA1MCk7XHJcbiAgICAvLyBjdHgubGluZVRvKGNlbnRlclggLSAyMCwgY2VudGVyWSAtIDUwKTtcclxuICAgIC8vIGN0eC5saW5lVG8oY2VudGVyWCwgY2VudGVyWSAtIDcwKTtcclxuICAgIC8vIGN0eC5jbG9zZVBhdGgoKTtcclxuICAgIC8vIGN0eC5maWxsKCk7XHJcbiAgICAvLyB2YXIgY2hhbmdlID0gYW5nbGVDdXJyZW50ICsgTWF0aC5QSSAvIDI7XHJcblxyXG4gICAgdmFyIGkgPSBuZXdzZWdtZW50cy5sZW5ndGggLSBNYXRoLmZsb29yKGNoYW5nZSAvIChNYXRoLlBJICogMikgKiBuZXdzZWdtZW50cy5sZW5ndGgpIC0gMTtcclxuICAgIGlmIChpIDwgMCkgaSA9IGkgKyBuZXdzZWdtZW50cy5sZW5ndGg7XHJcbiAgICBjdHgudGV4dEFsaWduID0gJ2NlbnRlcic7XHJcbiAgICBjdHgudGV4dEJhc2VsaW5lID0gJ21pZGRsZSc7XHJcbiAgICBjdHguZmlsbFN0eWxlID0gcHJpbWFyeUNvbG9yO1xyXG4gICAgY3R4LmZvbnQgPSAnYm9sZCAxLjVlbSAnICsgZm9udEZhbWlseTtcclxuICAgIGN1cnJlbnRTZWdtZW50ID0gbmV3c2VnbWVudHNbaV07XHJcbiAgICBpc1N0YXJ0ZWQgJiYgY3R4LmZpbGxUZXh0KGN1cnJlbnRTZWdtZW50LCBjZW50ZXJYICsgMTAsIGNlbnRlclkgKyBzaXplICsgNTApO1xyXG4gICAgLy8gdmFyIGltZyA9IG5ldyBJbWFnZSgpXHJcbiAgXHJcbiAgICBcclxuICAgIFxyXG5zZXRMb2dvSW1nKGxvY2FsU3RvcmFnZS5nZXRJdGVtKFwiQ2VudGVyTG9nb1wiKSlcclxuICAgIFxyXG4gICAgLy8gY3R4LmRyYXdJbWFnZShpbWcsY2VudGVyWC01MCxjZW50ZXJZLTUwLDEwMCwxMDApXHJcbiAgfTtcclxuXHJcbiAgdmFyIGNsZWFyID0gZnVuY3Rpb24gY2xlYXIoKSB7XHJcbiAgICB2YXIgY3R4ID0gY2FudmFzQ29udGV4dDtcclxuICAgIGN0eC5jbGVhclJlY3QoMCwgMCwgMTAwMCwgODAwKTtcclxuICB9O1xyXG5cclxuICBcclxuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XHJcbiAgICBpZDogXCJ3aGVlbFwiXHJcbiAgfSwgUmVhY3QuY3JlYXRlRWxlbWVudChcImNhbnZhc1wiLCB7XHJcbiAgICBpZDogXCJjYW52YXNcIixcclxuICAgIGNsYXNzTmFtZTpcIkNBTlZBU1wiLFxyXG4gICAgd2lkdGg6IFwiNjAwXCIsXHJcbiAgICBoZWlnaHQ6IFwiNjAwXCIsXHJcbiAgICBzdHlsZToge1xyXG4gICAgICBtYXJnaW5Ub3A6IFwiNDVweFwiLFxyXG4gICAgICBtYXJnaW5MZWZ0OiBcIjM4cHhcIixcclxuICAgICAgcG9pbnRlckV2ZW50czogaXNGaW5pc2hlZCAmJiBpc09ubHlPbmNlID8gJ25vbmUnIDogJ2F1dG8nLFxyXG4gICAgICBcclxuICAgIH0sXHJcbiAgfSkpO1xyXG59O1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdC5tZW1vKFdoZWVsQ29tcG9uZW50KTsiXSwibmFtZXMiOlsiUmVhY3QiLCJyZXF1aXJlIiwiUmVhY3RIb3dsZXIiLCJkZWZhdWx0IiwiV2hlZWxDb21wb25lbnQiLCJfcmVmIiwic2hvdWxkV2VTcGluIiwic2V0U2hvdWxkV2VTcGluIiwidXNlU3RhdGUiLCJzb3VuZCIsInNldFNvdW5kIiwiTG9nb0ltZyIsInNldExvZ29JbWciLCJBcnJvd0ltZyIsInNldEFycm93SW1nIiwiY3NzIiwic2V0Q3NzIiwic2VnbWVudHMiLCJuZXdzZWdtZW50cyIsInNsaWNlIiwicmVtYWluaW5nc2VnbWVudHMiLCJsZW5ndGgiLCJzcGluU2Vjb25kcyIsInNlZ0NvbG9ycyIsIndpbm5pbmdTZWdtZW50Iiwib25GaW5pc2hlZCIsIl9yZWYkcHJpbWFyeUNvbG9yIiwicHJpbWFyeUNvbG9yIiwiX3JlZiRjb250cmFzdENvbG9yIiwiY29udHJhc3RDb2xvciIsIl9yZWYkaXNPbmx5T25jZSIsImlzT25seU9uY2UiLCJfcmVmJHNpemUiLCJzaXplIiwiX3JlZiR1cER1cmF0aW9uIiwidXBEdXJhdGlvbiIsIl9yZWYkZG93bkR1cmF0aW9uIiwiZG93bkR1cmF0aW9uIiwiX3JlZiRmb250RmFtaWx5IiwiZm9udEZhbWlseSIsImN1cnJlbnRTZWdtZW50IiwiaXNTdGFydGVkIiwiX3VzZVN0YXRlIiwiaXNGaW5pc2hlZCIsInNldEZpbmlzaGVkIiwidGltZXJIYW5kbGUiLCJ0aW1lckhhbmRsZU5vcm1hbCIsInRpbWVyTWFudWFsRGVsYXkiLCJ0aW1lckRlbGF5IiwidGltZXJEZWxheU5vcm1hbCIsImFuZ2xlQ3VycmVudCIsImFuZ2xlRGVsdGEiLCJhbmdsZUN1cnJlbnROb3JtYWwiLCJhbmdsZURlbHRhTm9ybWFsIiwibWF4U3BlZWROb3JtYWwiLCJjYW52YXNDb250ZXh0IiwibWF4U3BlZWQiLCJjb25zb2xlIiwibG9nIiwidXBUaW1lIiwiZG93blRpbWUiLCJzcGluU3RhcnQiLCJzcGluU3RhcnROb3JtYWwiLCJmcmFtZXMiLCJmcmFtZXNOb3JtYWwiLCJjZW50ZXJYIiwiY2VudGVyWSIsInVzZUVmZmVjdCIsInNwaW5Ob3JtYWwiLCJ3aGVlbEluaXQiLCJDQU5WQVMiLCJkb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIiwiY2xhc3NMaXN0IiwicmVtb3ZlIiwic3BpbiIsImluaXRDYW52YXMiLCJ3aGVlbERyYXciLCJjYW52YXMiLCJnZXRDb250ZXh0IiwiRGF0ZSIsImdldFRpbWUiLCJzZXRJbnRlcnZhbCIsIm9uVGltZXJUaWNrTm9ybWFsIiwiY291bnQiLCJtYWluQ291bnQiLCJkdXJhdGlvbiIsImN0eCIsImxhc3RBbmdsZSIsImxlbiIsIlBJMiIsIk1hdGgiLCJQSSIsImxpbmVXaWR0aCIsInN0cm9rZVN0eWxlIiwidGV4dEJhc2VsaW5lIiwidGV4dEFsaWduIiwiZm9udCIsImZpeGVkTm9vZlNlZyIsImZpeGVkQW5nbGUiLCJudW0iLCJpIiwiYW5nbGUiLCJkcmF3U2VnbWVudE5vcm1hbCIsImZpeCIsImtleSIsInZhbHVlIiwidHJ1bmMiLCJpbmRleE9mIiwic2F2ZSIsImJlZ2luUGF0aCIsIm1vdmVUbyIsImFyYyIsImxpbmVUbyIsImNsb3NlUGF0aCIsImZpbGxTdHlsZSIsImZpbGwiLCJzdHJva2UiLCJ0cmFuc2xhdGUiLCJyb3RhdGUiLCJmaWxsVGV4dCIsInN1YnN0ciIsInJlc3RvcmUiLCJvblRpbWVyVGljayIsImRyYXciLCJwcm9ncmVzcyIsImZpbmlzaGVkIiwic2luIiwiY2xlYXJJbnRlcnZhbCIsImNsZWFyIiwiZHJhd1doZWVsIiwiZHJhd05lZWRsZSIsImRyYXdTZWdtZW50IiwiZHJhd0ltYWdlUm90IiwiaW1nIiwieCIsInkiLCJ3aWR0aCIsImhlaWdodCIsImRlZyIsInJhZCIsImRyYXdJbWFnZSIsIkltYWdlIiwic3JjIiwib25sb2FkIiwiYXJyb3ciLCJjaGFuZ2UiLCJBcnJvd1BvcyIsImxvY2FsU3RvcmFnZSIsImdldEl0ZW0iLCJkcmF3Um90YXRlMTIiLCJkcmF3Um90YXRlZDMiLCJnbG9iYWxDb21wb3NpdGVPcGVyYXRpb24iLCJkcmF3Um90YXRlZDYiLCJkcmF3Um90YXRlZDkiLCJmbG9vciIsImNsZWFyUmVjdCIsImNyZWF0ZUVsZW1lbnQiLCJpZCIsImNsYXNzTmFtZSIsInN0eWxlIiwibWFyZ2luVG9wIiwibWFyZ2luTGVmdCIsInBvaW50ZXJFdmVudHMiLCJtb2R1bGUiLCJleHBvcnRzIiwibWVtbyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./plugins/amazing-spin-wheel-game/index.js\n");

/***/ })

});